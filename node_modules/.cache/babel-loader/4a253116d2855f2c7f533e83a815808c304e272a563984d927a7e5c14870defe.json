{"ast":null,"code":"import mockData from '../mockData.json';\nconst BASE_URL = 'http://localhost:3001/user';\nconst FETCH_ERROR_MESSAGE = 'Failed to fetch data. Using mocked data.';\nasync function fetchData(endpoint, userId) {\n  const url = `${BASE_URL}/${userId}/${endpoint}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`${FETCH_ERROR_MESSAGE} Endpoint: ${endpoint}`);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    return response.json();\n  } else {\n    throw new Error('Invalid JSON response');\n  }\n}\nexport async function fetchUserData(userId) {\n  try {\n    const userData = await fetchData('', userId);\n    return mapUserData(userData.data);\n  } catch (error) {\n    console.warn(error);\n    const userDataFromMock = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\n    return mapUserData(userDataFromMock);\n  }\n}\nexport async function fetchUserActivity(userId) {\n  try {\n    const userActivity = await fetchData('activity', userId);\n    return mapUserActivity(userActivity.data);\n  } catch (error) {\n    console.warn(error);\n    const userActivityFromMock = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\n    return mapUserActivity(userActivityFromMock);\n  }\n}\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const userAverageSessions = await fetchData('average-sessions', userId);\n    return mapUserAverageSessions(userAverageSessions.data);\n  } catch (error) {\n    console.warn(error);\n    const userAverageSessionsFromMock = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\n    return mapUserAverageSessions(userAverageSessionsFromMock);\n  }\n}\nexport async function fetchUserPerformance(userId) {\n  try {\n    const userPerformance = await fetchData('performance', userId);\n    return mapUserPerformance(userPerformance.data);\n  } catch (error) {\n    console.warn(error);\n    const userPerformanceFromMock = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\n    return mapUserPerformance(userPerformanceFromMock);\n  }\n}\nfunction mapUserData(userData) {\n  var _userData$TodayScore, _userData$userInfos$f, _userData$userInfos, _userData$userInfos$l, _userData$userInfos2, _userData$keyData$cal, _userData$keyData, _userData$keyData$pro, _userData$keyData2, _userData$keyData$car, _userData$keyData3, _userData$keyData$lip, _userData$keyData4;\n  const scoreToUse = userData.score !== undefined ? userData.score : (_userData$TodayScore = userData.TodayScore) !== null && _userData$TodayScore !== void 0 ? _userData$TodayScore : 0;\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: (_userData$userInfos$f = (_userData$userInfos = userData.userInfos) === null || _userData$userInfos === void 0 ? void 0 : _userData$userInfos.firstName) !== null && _userData$userInfos$f !== void 0 ? _userData$userInfos$f : '',\n      lastName: (_userData$userInfos$l = (_userData$userInfos2 = userData.userInfos) === null || _userData$userInfos2 === void 0 ? void 0 : _userData$userInfos2.lastName) !== null && _userData$userInfos$l !== void 0 ? _userData$userInfos$l : ''\n    },\n    keyData: {\n      calorieCount: (_userData$keyData$cal = (_userData$keyData = userData.keyData) === null || _userData$keyData === void 0 ? void 0 : _userData$keyData.calorieCount) !== null && _userData$keyData$cal !== void 0 ? _userData$keyData$cal : 0,\n      proteinCount: (_userData$keyData$pro = (_userData$keyData2 = userData.keyData) === null || _userData$keyData2 === void 0 ? void 0 : _userData$keyData2.proteinCount) !== null && _userData$keyData$pro !== void 0 ? _userData$keyData$pro : 0,\n      carbohydrateCount: (_userData$keyData$car = (_userData$keyData3 = userData.keyData) === null || _userData$keyData3 === void 0 ? void 0 : _userData$keyData3.carbohydrateCount) !== null && _userData$keyData$car !== void 0 ? _userData$keyData$car : 0,\n      lipidCount: (_userData$keyData$lip = (_userData$keyData4 = userData.keyData) === null || _userData$keyData4 === void 0 ? void 0 : _userData$keyData4.lipidCount) !== null && _userData$keyData$lip !== void 0 ? _userData$keyData$lip : 0\n    },\n    score: scoreToUse\n  };\n}\nfunction mapUserActivity(userActivity) {\n  if (!userActivity || !Array.isArray(userActivity.sessions)) {\n    return {\n      userId: '',\n      sessions: []\n    };\n  }\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.sessions.map(session => {\n      var _session$day, _session$kilogram, _session$calories;\n      return {\n        day: (_session$day = session.day) !== null && _session$day !== void 0 ? _session$day : '',\n        kilogram: (_session$kilogram = session.kilogram) !== null && _session$kilogram !== void 0 ? _session$kilogram : 0,\n        calories: (_session$calories = session.calories) !== null && _session$calories !== void 0 ? _session$calories : 0\n      };\n    })\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  if (!userAverageSessions || !Array.isArray(userAverageSessions.sessions)) {\n    return {\n      userId: '',\n      sessions: []\n    };\n  }\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => {\n      var _session$day2, _session$sessionLengt;\n      return {\n        day: (_session$day2 = session.day) !== null && _session$day2 !== void 0 ? _session$day2 : '',\n        sessionLength: (_session$sessionLengt = session.sessionLength) !== null && _session$sessionLengt !== void 0 ? _session$sessionLengt : 0\n      };\n    })\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  if (!userPerformance || !Array.isArray(userPerformance.data)) {\n    return {\n      userId: '',\n      data: []\n    };\n  }\n  return {\n    userId: userPerformance.userId,\n    data: userPerformance.data.map(item => {\n      var _item$kind, _item$value;\n      return {\n        kind: (_item$kind = item.kind) !== null && _item$kind !== void 0 ? _item$kind : '',\n        value: (_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : 0\n      };\n    })\n  };\n}","map":{"version":3,"names":["mockData","BASE_URL","FETCH_ERROR_MESSAGE","fetchData","endpoint","userId","url","response","fetch","ok","Error","contentType","headers","get","includes","json","fetchUserData","userData","mapUserData","data","error","console","warn","userDataFromMock","USER_MAIN_DATA","find","user","id","parseInt","fetchUserActivity","userActivity","mapUserActivity","userActivityFromMock","USER_ACTIVITY","activity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","userAverageSessionsFromMock","USER_AVERAGE_SESSIONS","session","fetchUserPerformance","userPerformance","mapUserPerformance","userPerformanceFromMock","USER_PERFORMANCE","performance","_userData$TodayScore","_userData$userInfos$f","_userData$userInfos","_userData$userInfos$l","_userData$userInfos2","_userData$keyData$cal","_userData$keyData","_userData$keyData$pro","_userData$keyData2","_userData$keyData$car","_userData$keyData3","_userData$keyData$lip","_userData$keyData4","scoreToUse","score","undefined","TodayScore","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","Array","isArray","sessions","map","_session$day","_session$kilogram","_session$calories","day","kilogram","calories","_session$day2","_session$sessionLengt","sessionLength","item","_item$kind","_item$value","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["import mockData from '../mockData.json';\r\n\r\nconst BASE_URL = 'http://localhost:3001/user';\r\nconst FETCH_ERROR_MESSAGE = 'Failed to fetch data. Using mocked data.';\r\n\r\nasync function fetchData(endpoint, userId) {\r\n  const url = `${BASE_URL}/${userId}/${endpoint}`;\r\n  const response = await fetch(url);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`${FETCH_ERROR_MESSAGE} Endpoint: ${endpoint}`);\r\n  }\r\n\r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.includes('application/json')) {\r\n    return response.json();\r\n  } else {\r\n    throw new Error('Invalid JSON response');\r\n  }\r\n}\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const userData = await fetchData('', userId);\r\n    return mapUserData(userData.data);\r\n  } catch (error) {\r\n    console.warn(error);\r\n    const userDataFromMock = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\r\n    return mapUserData(userDataFromMock);\r\n  }\r\n}\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const userActivity = await fetchData('activity', userId);\r\n    return mapUserActivity(userActivity.data);\r\n  } catch (error) {\r\n    console.warn(error);\r\n    const userActivityFromMock = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\r\n    return mapUserActivity(userActivityFromMock);\r\n  }\r\n}\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const userAverageSessions = await fetchData('average-sessions', userId);\r\n    return mapUserAverageSessions(userAverageSessions.data);\r\n  } catch (error) {\r\n    console.warn(error);\r\n    const userAverageSessionsFromMock = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\r\n    return mapUserAverageSessions(userAverageSessionsFromMock);\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const userPerformance = await fetchData('performance', userId);\r\n    return mapUserPerformance(userPerformance.data);\r\n  } catch (error) {\r\n    console.warn(error);\r\n    const userPerformanceFromMock = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\r\n    return mapUserPerformance(userPerformanceFromMock);\r\n  }\r\n}\r\n\r\nfunction mapUserData(userData) {\r\n  const scoreToUse = userData.score !== undefined ? userData.score : userData.TodayScore ?? 0;\r\n\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.userInfos?.firstName ?? '',\r\n      lastName: userData.userInfos?.lastName ?? '',\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.keyData?.calorieCount ?? 0,\r\n      proteinCount: userData.keyData?.proteinCount ?? 0,\r\n      carbohydrateCount: userData.keyData?.carbohydrateCount ?? 0,\r\n      lipidCount: userData.keyData?.lipidCount ?? 0,\r\n    },\r\n    score: scoreToUse,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  if (!userActivity || !Array.isArray(userActivity.sessions)) {\r\n    return { userId: '', sessions: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      kilogram: session.kilogram ?? 0,\r\n      calories: session.calories ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  if (!userAverageSessions || !Array.isArray(userAverageSessions.sessions)) {\r\n    return { userId: '', sessions: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      sessionLength: session.sessionLength ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  if (!userPerformance || !Array.isArray(userPerformance.data)) {\r\n    return { userId: '', data: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind ?? '',\r\n      value: item.value ?? 0,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}