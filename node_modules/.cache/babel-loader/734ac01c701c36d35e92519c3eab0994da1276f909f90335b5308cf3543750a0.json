{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nconst BASE_URL = \"http://localhost:3000\";\nconst ACTIVITY_BY_KIND = {\n  1: \"Cardio\",\n  2: \"Energie\",\n  3: \"Endurance\",\n  4: \"Force\",\n  5: \"Vitesse\",\n  6: \"Intensité\"\n};\n\n/**\r\n * Hook used to extract data from SportSeeAPI to feed the dashboard.\r\n * @param {string} service\r\n * @param {string} userId\r\n * @returns {undefined|Object}\r\n */\nexport function useSportSeeApi(service, userId) {\n  _s();\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const endpoint = getEndpointByService(service, userId);\n  useEffect(() => {\n    if (!endpoint) return;\n    setIsLoading(true);\n    async function fetchData() {\n      try {\n        const url = `${BASE_URL}/${endpoint}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const extractedData = extractDataByService(data, service);\n        setData(extractedData);\n      } catch (err) {\n        console.error(`An error occured while fetching ${endpoint} : ${err}`);\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchData();\n  }, [service, userId, endpoint]);\n  return {\n    data,\n    isLoading,\n    error\n  };\n}\n\n/**\r\n * @param {string} service \r\n * @param {string} userId \r\n * @returns {string} endpoint associated to the service and id\r\n */\n_s(useSportSeeApi, \"WJYBqn2c+jk5gbHkf/rp07sHMmE=\");\nfunction getEndpointByService(service, userId) {\n  switch (service) {\n    case \"activities\":\n      return `user/${userId}/performance`;\n    case \"average-sessions\":\n      return `user/${userId}/average-sessions`;\n    case \"daily-activity\":\n      return `user/${userId}/activity`;\n    case \"firstName\":\n      return `user/${userId}`;\n    case \"key-data\":\n      return `user/${userId}`;\n    case \"today-score\":\n      return `user/${userId}`;\n    default:\n      return null;\n  }\n}\n\n/**\r\n * Factory appealing specialized functions to extract data for each service.\r\n * @param {string|Object} data\r\n * @param {string} service\r\n * @returns {undefined|string|number|Object|array.Object}\r\n */\nfunction extractDataByService(data, service) {\n  if (data) {\n    switch (service) {\n      case \"activities\":\n        return getActivities(data.data.data);\n      case \"average-sessions\":\n        return getAverageSessions(data.data.sessions);\n      case \"daily-activity\":\n        return getDailyActivity(data.data.sessions);\n      case \"firstName\":\n        return getFirstName(data);\n      case \"key-data\":\n        return getKeyData(data);\n      case \"today-score\":\n        return getTodayScore(data);\n      default:\n        console.error(`extractDataByService error: service \"${service}\" is not defined.`);\n        return;\n    }\n  }\n  console.error(\"extractDataByService error: no data to process.\");\n  return;\n}\n\n/**\r\n * @returns {array.Object} default data for ActivitiesChart\r\n */\nexport function getDefaultActivities() {\n  const activities = [];\n  for (let key in ACTIVITY_BY_KIND) {\n    activities.push({\n      activity: ACTIVITY_BY_KIND[key],\n      value: 0\n    });\n  }\n  return activities;\n}\n\n/**\r\n * @param {array.Object} userData\r\n * @returns {array.Object} data for ActivitiesChart\r\n */\nfunction getActivities(userData) {\n  const activities = [];\n  if (userData) {\n    for (let item of userData) {\n      activities.push({\n        activity: ACTIVITY_BY_KIND[item.kind],\n        value: item.value\n      });\n    }\n    return activities;\n  }\n  return getDefaultActivities();\n}\n\n/**\r\n * @returns {array.Object} default data for AverageSessionsChart\r\n */\nexport function getDefaultAverageSessions() {\n  const averageSessions = [{\n    day: \"L\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"M\",\n    sessionLength: 0\n  }, {\n    day: \"J\",\n    sessionLength: 0\n  }, {\n    day: \"V\",\n    sessionLength: 0\n  }, {\n    day: \"S\",\n    sessionLength: 0\n  }, {\n    day: \"D\",\n    sessionLength: 0\n  }];\n  return averageSessions;\n}\n\n/**\r\n * @param {array.Object} userData\r\n * @returns {array.Object} data for AverageSessionsChart\r\n */\nfunction getAverageSessions(userData) {\n  let averageSessions = getDefaultAverageSessions();\n  for (let index in userData) {\n    averageSessions[index].sessionLength = userData[index].sessionLength;\n  }\n  return averageSessions;\n}\n\n/**\r\n * Build an array with the dates of the 7 previous days.\r\n * @returns {array.Object} default data for DailyActivityChart\r\n */\nexport function getDefaultDailyActivity() {\n  const dailyActivity = [];\n  let date = new Date(Date.now());\n\n  // eslint-disable-next-line no-unused-vars\n  for (let _ of \"1234567\") {\n    let dateFr = new Intl.DateTimeFormat(\"fr\").format(date);\n    dailyActivity.push({\n      day: dateFr.slice(0, 5),\n      kilogram: 0,\n      calories: 0\n    });\n    date.setDate(date.getDate() - 1);\n  }\n  dailyActivity.reverse();\n  return dailyActivity;\n}\n\n/**\r\n * @param {array.Object} userData\r\n * @returns {array.Object} data for DailyActivityChart\r\n */\nfunction getDailyActivity(userData) {\n  if (userData) {\n    const dailyActivity = [];\n    for (let item of userData) {\n      // eslint-disable-next-line no-unused-vars\n      const [yyyy, mm, dd] = item.day.split(\"-\");\n      dailyActivity.push({\n        day: `${dd}/${mm}`,\n        kilogram: item.kilogram,\n        calories: item.calories\n      });\n    }\n    return dailyActivity;\n  }\n  return getDefaultDailyActivity();\n}\n\n/**\r\n * @param {string} userData\r\n * @returns {string} user first name\r\n */\nfunction getFirstName(userData) {\n  return userData === \"can not get user\" ? \"unknown user\" : userData.data.userInfos.firstName;\n}\n\n/**\r\n * @returns {Object} default data for InfoCardsGroup\r\n */\nexport function getDefaultKeyData() {\n  return {\n    calorieCount: 0,\n    proteinCount: 0,\n    carbohydrateCount: 0,\n    lipidCount: 0\n  };\n}\n\n/**\r\n * @param {(string|Object)} userData\r\n * @returns {Object} data for InfoCardsGroup\r\n */\nfunction getKeyData(userData) {\n  return userData === \"can not get user\" ? getDefaultKeyData() : userData.data.keyData;\n}\n\n/**\r\n * @param {(string|Object)} userData\r\n * @returns data for ScoreChart\r\n */\nfunction getTodayScore(userData) {\n  return userData === \"can not get user\" ? 0 : userData.data.todayScore;\n}","map":{"version":3,"names":["useEffect","useState","BASE_URL","ACTIVITY_BY_KIND","useSportSeeApi","service","userId","_s","data","setData","isLoading","setIsLoading","error","setError","endpoint","getEndpointByService","fetchData","url","response","fetch","json","extractedData","extractDataByService","err","console","getActivities","getAverageSessions","sessions","getDailyActivity","getFirstName","getKeyData","getTodayScore","getDefaultActivities","activities","key","push","activity","value","userData","item","kind","getDefaultAverageSessions","averageSessions","day","sessionLength","index","getDefaultDailyActivity","dailyActivity","date","Date","now","_","dateFr","Intl","DateTimeFormat","format","slice","kilogram","calories","setDate","getDate","reverse","yyyy","mm","dd","split","userInfos","firstName","getDefaultKeyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","keyData","todayScore"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst BASE_URL = \"http://localhost:3000\";\r\n\r\nconst ACTIVITY_BY_KIND = {\r\n  1: \"Cardio\",\r\n  2: \"Energie\",\r\n  3: \"Endurance\",\r\n  4: \"Force\",\r\n  5: \"Vitesse\",\r\n  6: \"Intensité\",\r\n};\r\n\r\n/**\r\n * Hook used to extract data from SportSeeAPI to feed the dashboard.\r\n * @param {string} service\r\n * @param {string} userId\r\n * @returns {undefined|Object}\r\n */\r\nexport function useSportSeeApi(service, userId) {\r\n  const [data, setData] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  const endpoint = getEndpointByService(service, userId);\r\n\r\n  useEffect(() => {\r\n    if (!endpoint) return;\r\n\r\n    setIsLoading(true);\r\n\r\n    async function fetchData() {\r\n      try {\r\n        const url = `${BASE_URL}/${endpoint}`;\r\n\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        const extractedData = extractDataByService(data, service);\r\n\r\n        setData(extractedData);\r\n      } catch (err) {\r\n        console.error(`An error occured while fetching ${endpoint} : ${err}`);\r\n\r\n        setError(true);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [service, userId, endpoint]);\r\n\r\n  return { data, isLoading, error };\r\n}\r\n\r\n/**\r\n * @param {string} service \r\n * @param {string} userId \r\n * @returns {string} endpoint associated to the service and id\r\n */\r\nfunction getEndpointByService(service, userId) {\r\n  switch (service) {\r\n    case \"activities\":\r\n      return `user/${userId}/performance`;\r\n\r\n    case \"average-sessions\":\r\n      return `user/${userId}/average-sessions`;\r\n\r\n    case \"daily-activity\":\r\n      return `user/${userId}/activity`;\r\n\r\n    case \"firstName\":\r\n      return `user/${userId}`;\r\n\r\n    case \"key-data\":\r\n      return `user/${userId}`;\r\n\r\n    case \"today-score\":\r\n      return `user/${userId}`;\r\n\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Factory appealing specialized functions to extract data for each service.\r\n * @param {string|Object} data\r\n * @param {string} service\r\n * @returns {undefined|string|number|Object|array.Object}\r\n */\r\nfunction extractDataByService(data, service) {\r\n  if (data) {\r\n    switch (service) {\r\n      case \"activities\":\r\n        return getActivities(data.data.data);\r\n\r\n      case \"average-sessions\":\r\n        return getAverageSessions(data.data.sessions);\r\n\r\n      case \"daily-activity\":\r\n        return getDailyActivity(data.data.sessions);\r\n\r\n      case \"firstName\":\r\n        return getFirstName(data);\r\n\r\n      case \"key-data\":\r\n        return getKeyData(data);\r\n\r\n      case \"today-score\":\r\n        return getTodayScore(data);\r\n\r\n      default:\r\n        console.error(\r\n          `extractDataByService error: service \"${service}\" is not defined.`\r\n        );\r\n        return;\r\n    }\r\n  }\r\n\r\n  console.error(\"extractDataByService error: no data to process.\");\r\n  return;\r\n}\r\n\r\n/**\r\n * @returns {array.Object} default data for ActivitiesChart\r\n */\r\nexport function getDefaultActivities() {\r\n  const activities = [];\r\n\r\n  for (let key in ACTIVITY_BY_KIND) {\r\n    activities.push({\r\n      activity: ACTIVITY_BY_KIND[key],\r\n      value: 0,\r\n    });\r\n  }\r\n\r\n  return activities;\r\n}\r\n\r\n/**\r\n * @param {array.Object} userData\r\n * @returns {array.Object} data for ActivitiesChart\r\n */\r\nfunction getActivities(userData) {\r\n  const activities = [];\r\n\r\n  if (userData) {\r\n    for (let item of userData) {\r\n      activities.push({\r\n        activity: ACTIVITY_BY_KIND[item.kind],\r\n        value: item.value,\r\n      });\r\n    }\r\n\r\n    return activities;\r\n  }\r\n\r\n  return getDefaultActivities();\r\n}\r\n\r\n/**\r\n * @returns {array.Object} default data for AverageSessionsChart\r\n */\r\nexport function getDefaultAverageSessions() {\r\n  const averageSessions = [\r\n    {\r\n      day: \"L\",\r\n      sessionLength: 0,\r\n    },\r\n    {\r\n      day: \"M\",\r\n      sessionLength: 0,\r\n    },\r\n    {\r\n      day: \"M\",\r\n      sessionLength: 0,\r\n    },\r\n    {\r\n      day: \"J\",\r\n      sessionLength: 0,\r\n    },\r\n    {\r\n      day: \"V\",\r\n      sessionLength: 0,\r\n    },\r\n    {\r\n      day: \"S\",\r\n      sessionLength: 0,\r\n    },\r\n    {\r\n      day: \"D\",\r\n      sessionLength: 0,\r\n    },\r\n  ];\r\n\r\n  return averageSessions;\r\n}\r\n\r\n/**\r\n * @param {array.Object} userData\r\n * @returns {array.Object} data for AverageSessionsChart\r\n */\r\nfunction getAverageSessions(userData) {\r\n  let averageSessions = getDefaultAverageSessions();\r\n\r\n  for (let index in userData) {\r\n    averageSessions[index].sessionLength = userData[index].sessionLength;\r\n  }\r\n\r\n  return averageSessions;\r\n}\r\n\r\n/**\r\n * Build an array with the dates of the 7 previous days.\r\n * @returns {array.Object} default data for DailyActivityChart\r\n */\r\nexport function getDefaultDailyActivity() {\r\n  const dailyActivity = [];\r\n\r\n  let date = new Date(Date.now());\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  for (let _ of \"1234567\") {\r\n    let dateFr = new Intl.DateTimeFormat(\"fr\").format(date);\r\n\r\n    dailyActivity.push({\r\n      day: dateFr.slice(0, 5),\r\n      kilogram: 0,\r\n      calories: 0,\r\n    });\r\n\r\n    date.setDate(date.getDate() - 1);\r\n  }\r\n\r\n  dailyActivity.reverse();\r\n\r\n  return dailyActivity;\r\n}\r\n\r\n/**\r\n * @param {array.Object} userData\r\n * @returns {array.Object} data for DailyActivityChart\r\n */\r\nfunction getDailyActivity(userData) {\r\n  if (userData) {\r\n    const dailyActivity = [];\r\n\r\n    for (let item of userData) {\r\n      // eslint-disable-next-line no-unused-vars\r\n      const [yyyy, mm, dd] = item.day.split(\"-\");\r\n\r\n      dailyActivity.push({\r\n        day: `${dd}/${mm}`,\r\n        kilogram: item.kilogram,\r\n        calories: item.calories,\r\n      });\r\n    }\r\n\r\n    return dailyActivity;\r\n  }\r\n\r\n  return getDefaultDailyActivity();\r\n}\r\n\r\n/**\r\n * @param {string} userData\r\n * @returns {string} user first name\r\n */\r\nfunction getFirstName(userData) {\r\n  return userData === \"can not get user\"\r\n    ? \"unknown user\"\r\n    : userData.data.userInfos.firstName;\r\n}\r\n\r\n/**\r\n * @returns {Object} default data for InfoCardsGroup\r\n */\r\nexport function getDefaultKeyData() {\r\n  return {\r\n    calorieCount: 0,\r\n    proteinCount: 0,\r\n    carbohydrateCount: 0,\r\n    lipidCount: 0,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {(string|Object)} userData\r\n * @returns {Object} data for InfoCardsGroup\r\n */\r\nfunction getKeyData(userData) {\r\n  return userData === \"can not get user\"\r\n    ? getDefaultKeyData()\r\n    : userData.data.keyData;\r\n}\r\n\r\n/**\r\n * @param {(string|Object)} userData\r\n * @returns data for ScoreChart\r\n */\r\nfunction getTodayScore(userData) {\r\n  return userData === \"can not get user\" ? 0 : userData.data.todayScore;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}