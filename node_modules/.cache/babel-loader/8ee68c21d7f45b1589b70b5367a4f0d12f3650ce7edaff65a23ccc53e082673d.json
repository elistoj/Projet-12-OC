{"ast":null,"code":"const BASE_URL = 'http://localhost:3000/user';\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\n  }\n  return response.json();\n}\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}`);\n    const userData = await checkResponse(response);\n    return mapUserData(userData);\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    return null; // Return null if an error occurs\n  }\n}\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}/activity`);\n    const userActivity = await checkResponse(response);\n    return mapUserActivity(userActivity);\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    return null; // Return null if an error occurs\n  }\n}\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}/average-sessions`);\n    const userAverageSessions = await checkResponse(response);\n    return mapUserAverageSessions(userAverageSessions);\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    return null; // Return null if an error occurs\n  }\n}\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}/performance`);\n    const userPerformance = await checkResponse(response);\n    return mapUserPerformance(userPerformance);\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    return null; // Return null if an error occurs\n  }\n}\nfunction mapUserData(userData) {\n  var _userData$id, _userData$name$split$, _userData$name, _userData$name$split$2, _userData$name2, _userData$public_repo, _userData$followers, _userData$following, _userData$bio, _userData$score;\n  return {\n    id: (_userData$id = userData === null || userData === void 0 ? void 0 : userData.id) !== null && _userData$id !== void 0 ? _userData$id : '',\n    userInfos: {\n      firstName: (_userData$name$split$ = userData === null || userData === void 0 ? void 0 : (_userData$name = userData.name) === null || _userData$name === void 0 ? void 0 : _userData$name.split(' ')[0]) !== null && _userData$name$split$ !== void 0 ? _userData$name$split$ : '',\n      lastName: (_userData$name$split$2 = userData === null || userData === void 0 ? void 0 : (_userData$name2 = userData.name) === null || _userData$name2 === void 0 ? void 0 : _userData$name2.split(' ')[1]) !== null && _userData$name$split$2 !== void 0 ? _userData$name$split$2 : ''\n    },\n    keyData: {\n      calorieCount: (_userData$public_repo = userData === null || userData === void 0 ? void 0 : userData.public_repos) !== null && _userData$public_repo !== void 0 ? _userData$public_repo : 0,\n      proteinCount: (_userData$followers = userData === null || userData === void 0 ? void 0 : userData.followers) !== null && _userData$followers !== void 0 ? _userData$followers : 0,\n      carbohydrateCount: (_userData$following = userData === null || userData === void 0 ? void 0 : userData.following) !== null && _userData$following !== void 0 ? _userData$following : 0,\n      lipidCount: (_userData$bio = userData === null || userData === void 0 ? void 0 : userData.bio) !== null && _userData$bio !== void 0 ? _userData$bio : 0\n    },\n    score: (_userData$score = userData === null || userData === void 0 ? void 0 : userData.score) !== null && _userData$score !== void 0 ? _userData$score : 0\n  };\n}\nfunction mapUserActivity(userActivity) {\n  var _userActivity$userId;\n  if (!userActivity || !Array.isArray(userActivity.sessions)) {\n    return {\n      userId: '',\n      sessions: []\n    }; // Provide default or empty data\n  }\n  return {\n    userId: (_userActivity$userId = userActivity.userId) !== null && _userActivity$userId !== void 0 ? _userActivity$userId : '',\n    sessions: userActivity.sessions.map(session => {\n      var _session$day, _session$calories;\n      return {\n        day: (_session$day = session.day) !== null && _session$day !== void 0 ? _session$day : '',\n        sessionLength: (_session$calories = session.calories) !== null && _session$calories !== void 0 ? _session$calories : 0\n      };\n    })\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  var _userAverageSessions$;\n  if (!userAverageSessions || !Array.isArray(userAverageSessions.sessions)) {\n    return {\n      userId: '',\n      sessions: []\n    }; // Provide default or empty data\n  }\n  return {\n    userId: (_userAverageSessions$ = userAverageSessions.userId) !== null && _userAverageSessions$ !== void 0 ? _userAverageSessions$ : '',\n    sessions: userAverageSessions.sessions.map(session => {\n      var _session$day2, _session$sessionLengt;\n      return {\n        day: (_session$day2 = session.day) !== null && _session$day2 !== void 0 ? _session$day2 : '',\n        averageDuration: (_session$sessionLengt = session.sessionLength) !== null && _session$sessionLengt !== void 0 ? _session$sessionLengt : 0\n      };\n    })\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  var _userPerformance$user;\n  if (!userPerformance || !Array.isArray(userPerformance.data)) {\n    return {\n      userId: '',\n      data: []\n    }; // Provide default or empty data\n  }\n  return {\n    userId: (_userPerformance$user = userPerformance.userId) !== null && _userPerformance$user !== void 0 ? _userPerformance$user : '',\n    data: userPerformance.data.map(item => {\n      var _item$kind, _item$value;\n      return {\n        kind: (_item$kind = item.kind) !== null && _item$kind !== void 0 ? _item$kind : '',\n        value: (_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : 0\n      };\n    })\n  };\n}","map":{"version":3,"names":["BASE_URL","checkResponse","response","ok","errorText","text","Error","status","json","fetchUserData","userId","fetch","userData","mapUserData","error","console","fetchUserActivity","userActivity","mapUserActivity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance","_userData$id","_userData$name$split$","_userData$name","_userData$name$split$2","_userData$name2","_userData$public_repo","_userData$followers","_userData$following","_userData$bio","_userData$score","id","userInfos","firstName","name","split","lastName","keyData","calorieCount","public_repos","proteinCount","followers","carbohydrateCount","following","lipidCount","bio","score","_userActivity$userId","Array","isArray","sessions","map","session","_session$day","_session$calories","day","sessionLength","calories","_userAverageSessions$","_session$day2","_session$sessionLengt","averageDuration","_userPerformance$user","data","item","_item$kind","_item$value","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3000/user';\r\n\r\nasync function checkResponse(response) {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}`);\r\n    const userData = await checkResponse(response);\r\n    return mapUserData(userData);\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    return null; // Return null if an error occurs\r\n  }\r\n}\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/activity`);\r\n    const userActivity = await checkResponse(response);\r\n    return mapUserActivity(userActivity);\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    return null; // Return null if an error occurs\r\n  }\r\n}\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/average-sessions`);\r\n    const userAverageSessions = await checkResponse(response);\r\n    return mapUserAverageSessions(userAverageSessions);\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    return null; // Return null if an error occurs\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/performance`);\r\n    const userPerformance = await checkResponse(response);\r\n    return mapUserPerformance(userPerformance);\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    return null; // Return null if an error occurs\r\n  }\r\n}\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData?.id ?? '',\r\n    userInfos: {\r\n      firstName: userData?.name?.split(' ')[0] ?? '',\r\n      lastName: userData?.name?.split(' ')[1] ?? '',\r\n    },\r\n    keyData: {\r\n      calorieCount: userData?.public_repos ?? 0,\r\n      proteinCount: userData?.followers ?? 0,\r\n      carbohydrateCount: userData?.following ?? 0,\r\n      lipidCount: userData?.bio ?? 0,\r\n    },\r\n    score: userData?.score ?? 0,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  if (!userActivity || !Array.isArray(userActivity.sessions)) {\r\n    return { userId: '', sessions: [] }; // Provide default or empty data\r\n  }\r\n\r\n  return {\r\n    userId: userActivity.userId ?? '',\r\n    sessions: userActivity.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      sessionLength: session.calories ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  if (!userAverageSessions || !Array.isArray(userAverageSessions.sessions)) {\r\n    return { userId: '', sessions: [] }; // Provide default or empty data\r\n  }\r\n\r\n  return {\r\n    userId: userAverageSessions.userId ?? '',\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      averageDuration: session.sessionLength ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  if (!userPerformance || !Array.isArray(userPerformance.data)) {\r\n    return { userId: '', data: [] }; // Provide default or empty data\r\n  }\r\n\r\n  return {\r\n    userId: userPerformance.userId ?? '',\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind ?? '',\r\n      value: item.value ?? 0,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}