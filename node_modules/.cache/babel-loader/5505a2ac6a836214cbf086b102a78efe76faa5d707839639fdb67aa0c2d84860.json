{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elist\\\\OneDrive\\\\Documents\\\\GitHub\\\\Projet-12-OC\\\\src\\\\components\\\\charts\\\\AverageSessionsChart\\\\AverageSessionsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, Tooltip } from 'recharts';\nimport './AverageSessionsChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst daysOfWeek = ['L', 'M', 'M', 'J', 'V', 'S', 'D'];\nconst CustomTooltip = ({\n  active,\n  payload\n}) => {\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-tooltip\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label\",\n        children: `${payload[0].value} min`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n};\n_c = CustomTooltip;\nconst AverageSessionsChart = ({\n  data,\n  title\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    var _chartRef$current;\n    // Cleanup previous chart instance if exists\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current = null; // Clear the reference\n    }\n\n    // Sort data by day if not already sorted\n    const sortedData = data.slice().sort((a, b) => a.day - b.day);\n\n    // Get canvas context\n    const ctx = (_chartRef$current = chartRef.current) === null || _chartRef$current === void 0 ? void 0 : _chartRef$current.getContext('2d');\n\n    // Initialize chart instance\n    chartInstanceRef.current = new LineChart(ctx, {\n      data: {\n        labels: sortedData.map(d => daysOfWeek[d.day - 1]),\n        datasets: [{\n          data: sortedData.map(d => d.sessionLength),\n          backgroundColor: 'rgba(255, 1, 1, 0.7)',\n          borderColor: 'rgba(255, 1, 1, 0.7)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: 'rgba(255, 255, 255, 0.6)'\n            },\n            display: true,\n            title: {\n              display: true,\n              text: 'Days',\n              color: 'rgba(255, 255, 255, 1)',\n              font: {\n                size: 16,\n                family: \"'Roboto', sans-serif\"\n              }\n            }\n          },\n          y: {\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: 'rgba(255, 255, 255, 0.6)'\n            },\n            display: true,\n            title: {\n              display: true,\n              text: 'Session Length (min)',\n              color: 'rgba(255, 255, 255, 1)',\n              font: {\n                size: 16,\n                family: \"'Roboto', sans-serif\"\n              }\n            }\n          }\n        },\n        responsive: false,\n        // Disable responsiveness\n        maintainAspectRatio: true,\n        // Maintain square aspect ratio\n        aspectRatio: 1 // Aspect ratio 1:1 (square)\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current = null; // Clear the reference\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container-average\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-header-average\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper-average\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(AverageSessionsChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c2 = AverageSessionsChart;\nexport default AverageSessionsChart;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTooltip\");\n$RefreshReg$(_c2, \"AverageSessionsChart\");","map":{"version":3,"names":["React","useEffect","useRef","LineChart","Line","XAxis","Tooltip","jsxDEV","_jsxDEV","daysOfWeek","CustomTooltip","active","payload","length","className","children","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","AverageSessionsChart","data","title","_s","chartRef","chartInstanceRef","_chartRef$current","current","sortedData","slice","sort","a","b","day","ctx","getContext","labels","map","d","datasets","sessionLength","backgroundColor","borderColor","borderWidth","options","scales","x","grid","color","ticks","display","text","font","size","family","y","responsive","maintainAspectRatio","aspectRatio","ref","_c2","$RefreshReg$"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/components/charts/AverageSessionsChart/AverageSessionsChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { LineChart, Line, XAxis, Tooltip } from 'recharts';\r\nimport './AverageSessionsChart.css';\r\n\r\nconst daysOfWeek = ['L', 'M', 'M', 'J', 'V', 'S', 'D'];\r\n\r\nconst CustomTooltip = ({ active, payload }) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div className=\"custom-tooltip\">\r\n        <p className=\"label\">{`${payload[0].value} min`}</p>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst AverageSessionsChart = ({ data, title }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Cleanup previous chart instance if exists\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current = null; // Clear the reference\r\n    }\r\n\r\n    // Sort data by day if not already sorted\r\n    const sortedData = data.slice().sort((a, b) => a.day - b.day);\r\n\r\n    // Get canvas context\r\n    const ctx = chartRef.current?.getContext('2d');\r\n\r\n    // Initialize chart instance\r\n    chartInstanceRef.current = new LineChart(ctx, {\r\n      data: {\r\n        labels: sortedData.map((d) => daysOfWeek[d.day - 1]),\r\n        datasets: [{\r\n          data: sortedData.map((d) => d.sessionLength),\r\n          backgroundColor: 'rgba(255, 1, 1, 0.7)',\r\n          borderColor: 'rgba(255, 1, 1, 0.7)',\r\n          borderWidth: 1,\r\n        }],\r\n      },\r\n      options: {\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            ticks: {\r\n              color: 'rgba(255, 255, 255, 0.6)',\r\n            },\r\n            display: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Days',\r\n              color: 'rgba(255, 255, 255, 1)',\r\n              font: {\r\n                size: 16,\r\n                family: \"'Roboto', sans-serif\",\r\n              },\r\n            },\r\n          },\r\n          y: {\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.1)',\r\n            },\r\n            ticks: {\r\n              color: 'rgba(255, 255, 255, 0.6)',\r\n            },\r\n            display: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Session Length (min)',\r\n              color: 'rgba(255, 255, 255, 1)',\r\n              font: {\r\n                size: 16,\r\n                family: \"'Roboto', sans-serif\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        responsive: false, // Disable responsiveness\r\n        maintainAspectRatio: true, // Maintain square aspect ratio\r\n        aspectRatio: 1, // Aspect ratio 1:1 (square)\r\n      },\r\n    });\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current = null; // Clear the reference\r\n      }\r\n    };\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"chart-container-average\">\r\n      <div className=\"chart-header-average\">\r\n        <h2>{title}</h2>\r\n      </div>\r\n      <div className=\"chart-wrapper-average\">\r\n        <canvas ref={chartRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AverageSessionsChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}