{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elist\\\\OneDrive\\\\Documents\\\\GitHub\\\\Projet-12-OC\\\\src\\\\components\\\\charts\\\\PerformanceChart\\\\RadarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst kindMapping = {\n  \"1\": \"cardio\",\n  \"2\": \"energy\",\n  \"3\": \"endurance\",\n  \"4\": \"strength\",\n  \"5\": \"speed\",\n  \"6\": \"intensity\"\n};\nconst RadarChart = ({\n  data,\n  title\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n\n    // Destroy the existing chart instance if it exists\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n\n    // Sort data to ensure the labels are in the desired order\n    const sortedData = data.sort((a, b) => b.kind - a.kind);\n\n    // Custom plugin to draw dashed lines\n    const dashedLinePlugin = {\n      id: 'dashedLinePlugin',\n      beforeDraw: chart => {\n        const {\n          ctx,\n          chartArea\n        } = chart;\n        ctx.save();\n\n        // Set properties for dashed line\n        ctx.setLineDash([5, 5]);\n        ctx.strokeStyle = 'blue';\n        ctx.lineWidth = 1;\n\n        // Draw vertical dashed line\n        ctx.beginPath();\n        ctx.moveTo(chartArea.width / 2 + chartArea.left, chartArea.top);\n        ctx.lineTo(chartArea.width / 2 + chartArea.left, chartArea.bottom);\n        ctx.stroke();\n\n        // Draw horizontal dashed line\n        ctx.beginPath();\n        ctx.moveTo(chartArea.left, chartArea.height / 2 + chartArea.top);\n        ctx.lineTo(chartArea.right, chartArea.height / 2 + chartArea.top);\n        ctx.stroke();\n        ctx.restore();\n      }\n    };\n\n    // Create a new chart instance\n    chartInstanceRef.current = new Chart(ctx, {\n      type: 'radar',\n      data: {\n        labels: sortedData.map(d => kindMapping[d.kind]),\n        datasets: [{\n          data: sortedData.map(d => d.value),\n          backgroundColor: 'rgba(255, 1, 1, 0.7)',\n          borderColor: 'rgba(255, 1, 1, 0.7)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false\n          },\n          dashedLinePlugin: {} // Activate the custom plugin\n        },\n        scales: {\n          r: {\n            grid: {\n              color: 'white'\n            },\n            pointLabels: {\n              color: 'white'\n            },\n            ticks: {\n              display: false,\n              maxTicksLimit: 5 // Limit the number of grid lines to 5\n            }\n          }\n        },\n        layout: {\n          padding: {\n            top: 20,\n            left: 20,\n            right: 20,\n            bottom: 20\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false\n      },\n      plugins: [dashedLinePlugin] // Add the custom plugin to the chart\n    });\n\n    // Cleanup function to destroy the chart instance when the component unmounts\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container-radar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef,\n        style: {\n          backgroundColor: 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(RadarChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = RadarChart;\nexport default RadarChart;\nvar _c;\n$RefreshReg$(_c, \"RadarChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","kindMapping","RadarChart","data","title","_s","chartRef","chartInstanceRef","ctx","current","getContext","destroy","sortedData","sort","a","b","kind","dashedLinePlugin","id","beforeDraw","chart","chartArea","save","setLineDash","strokeStyle","lineWidth","beginPath","moveTo","width","left","top","lineTo","bottom","stroke","height","right","restore","type","labels","map","d","datasets","value","backgroundColor","borderColor","borderWidth","options","plugins","legend","display","scales","r","grid","color","pointLabels","ticks","maxTicksLimit","layout","padding","responsive","maintainAspectRatio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","_c","$RefreshReg$"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/components/charts/PerformanceChart/RadarChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst kindMapping = {\r\n  \"1\": \"cardio\",\r\n  \"2\": \"energy\",\r\n  \"3\": \"endurance\",\r\n  \"4\": \"strength\",\r\n  \"5\": \"speed\",\r\n  \"6\": \"intensity\"\r\n};\r\n\r\nconst RadarChart = ({ data, title }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    // Destroy the existing chart instance if it exists\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    // Sort data to ensure the labels are in the desired order\r\n    const sortedData = data.sort((a, b) => b.kind - a.kind);\r\n\r\n    // Custom plugin to draw dashed lines\r\n    const dashedLinePlugin = {\r\n      id: 'dashedLinePlugin',\r\n      beforeDraw: (chart) => {\r\n        const { ctx, chartArea } = chart;\r\n        ctx.save();\r\n\r\n        // Set properties for dashed line\r\n        ctx.setLineDash([5, 5]);\r\n        ctx.strokeStyle = 'blue';\r\n        ctx.lineWidth = 1;\r\n\r\n        // Draw vertical dashed line\r\n        ctx.beginPath();\r\n        ctx.moveTo(chartArea.width / 2 + chartArea.left, chartArea.top);\r\n        ctx.lineTo(chartArea.width / 2 + chartArea.left, chartArea.bottom);\r\n        ctx.stroke();\r\n\r\n        // Draw horizontal dashed line\r\n        ctx.beginPath();\r\n        ctx.moveTo(chartArea.left, chartArea.height / 2 + chartArea.top);\r\n        ctx.lineTo(chartArea.right, chartArea.height / 2 + chartArea.top);\r\n        ctx.stroke();\r\n\r\n        ctx.restore();\r\n      }\r\n    };\r\n\r\n    // Create a new chart instance\r\n    chartInstanceRef.current = new Chart(ctx, {\r\n      type: 'radar',\r\n      data: {\r\n        labels: sortedData.map(d => kindMapping[d.kind]),\r\n        datasets: [{\r\n          data: sortedData.map(d => d.value),\r\n          backgroundColor: 'rgba(255, 1, 1, 0.7)',\r\n          borderColor: 'rgba(255, 1, 1, 0.7)',\r\n          borderWidth: 1\r\n        }]\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: false\r\n          },\r\n          dashedLinePlugin: {}  // Activate the custom plugin\r\n        },\r\n        scales: {\r\n          r: {\r\n            grid: {\r\n              color: 'white'\r\n            },\r\n            pointLabels: {\r\n              color: 'white'\r\n            },\r\n            ticks: {\r\n              display: false,\r\n              maxTicksLimit: 5  // Limit the number of grid lines to 5\r\n            }\r\n          }\r\n        },\r\n        layout: {\r\n          padding: {\r\n            top: 20,\r\n            left: 20,\r\n            right: 20,\r\n            bottom: 20\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false\r\n      },\r\n      plugins: [dashedLinePlugin]  // Add the custom plugin to the chart\r\n    });\r\n\r\n    // Cleanup function to destroy the chart instance when the component unmounts\r\n    return () => {\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n      }\r\n    };\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"chart-container-radar\">\r\n      <div className=\"square-container\">\r\n        <div className=\"chart-title\">{title}</div>\r\n        <canvas ref={chartRef} style={{ backgroundColor: 'black' }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadarChart\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}