{"ast":null,"code":"//const BASE_URL = 'http://localhost:3000/user';\n//const API_KEY = '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';\n\n//async function checkResponse(response) {\n//  if (!response.ok) {\n//  const errorText = await response.text();\n//   throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\n// }\n// return response.json();\n//}\n\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`http://localhost:3000/user/${userId}`);\n    const userData = await response.json();\n    return userData;\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`http://localhost:3000/user/${userId}/activity`, {});\n    const userActivity = await checkResponse(response);\n    return mapUserActivity(userActivity);\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`http://localhost:3000/user/average-sessions`, {});\n    const userAverageSessions = await checkResponse(response);\n    return mapUserAverageSessions(userAverageSessions);\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    throw error;\n  }\n}\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`http://localhost:3000/user/performance`, {});\n    const userPerformance = await checkResponse(response);\n    return mapUserPerformance(userPerformance);\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    throw error;\n  }\n}\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: userData.name ? userData.name.split(' ')[0] : '',\n      lastName: userData.name ? userData.name.split(' ')[1] : ''\n    },\n    keyData: {\n      calorieCount: userData.public_repos,\n      proteinCount: userData.followers,\n      carbohydrateCount: userData.following,\n      lipidCount: userData.bio\n    },\n    score: userData.score\n  };\n}\nfunction mapUserActivity(userActivity) {\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.sessions.map(session => ({\n      day: session.day,\n      sessionLength: session.calories\n    }))\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => ({\n      day: session.day,\n      averageDuration: session.sessionLength\n    }))\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  return {\n    userId: userPerformance.userId,\n    data: userPerformance.data.map(item => ({\n      kind: item.kind,\n      value: item.value\n    }))\n  };\n}","map":{"version":3,"names":["fetchUserData","userId","response","fetch","userData","json","error","console","fetchUserActivity","userActivity","checkResponse","mapUserActivity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance","mapUserData","id","userInfos","firstName","name","split","lastName","keyData","calorieCount","public_repos","proteinCount","followers","carbohydrateCount","following","lipidCount","bio","score","sessions","map","session","day","sessionLength","calories","averageDuration","data","item","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["//const BASE_URL = 'http://localhost:3000/user';\r\n//const API_KEY = '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';\r\n\r\n//async function checkResponse(response) {\r\n//  if (!response.ok) {\r\n  //  const errorText = await response.text();\r\n //   throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\r\n // }\r\n // return response.json();\r\n//}\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/user/${userId}`)\r\n     const userData = await response.json();\r\n    return userData;\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/user/${userId}/activity`, {\r\n     \r\n    });\r\n    const userActivity = await checkResponse(response);\r\n    return mapUserActivity(userActivity);\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/user/average-sessions`, {\r\n  \r\n    });\r\n    const userAverageSessions = await checkResponse(response);\r\n    return mapUserAverageSessions(userAverageSessions);\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/user/performance`, {\r\n   \r\n    });\r\n    const userPerformance = await checkResponse(response);\r\n    return mapUserPerformance(userPerformance);\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.name ? userData.name.split(' ')[0] : '',\r\n      lastName: userData.name ? userData.name.split(' ')[1] : '',\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.public_repos,\r\n      proteinCount: userData.followers,\r\n      carbohydrateCount: userData.following,\r\n      lipidCount: userData.bio,\r\n    },\r\n    score: userData.score,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.sessions.map(session => ({\r\n      day: session.day,\r\n      sessionLength: session.calories,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day,\r\n      averageDuration: session.sessionLength,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind,\r\n      value: item.value,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}