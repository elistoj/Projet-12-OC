{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\r\n * This function will fetch data from an API, if the API fails, it fetches data from mocked data.\r\n * Also return a boolean indicating whether the data is loading, and two booleans indicating whether there was errors on the API and mocked data.\r\n *\r\n * @category Custom Hooks\r\n * @param {string} urlAPI - The url of the API.\r\n * @param {string} userID - The userID for the mocked data.\r\n * @param {string} urlMockedData - The url of the mocked data.\r\n * @returns An object with the following properties: isLoading, apiData, mockedData, errorAPI, errorMocked.\r\n */\nexport function useFetch(urlAPI, userID, urlMockedData) {\n  _s();\n  const [apiData, setApiData] = useState(null);\n  const [mockedData, setMockedData] = useState(null);\n  const [isLoading, setLoading] = useState(true);\n  const [errorAPI, setErrorAPI] = useState(false);\n  const [errorMocked, setErrorMocked] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    async function fetchData(fetchURL, isDataMocked, errorSetState) {\n      try {\n        const response = await fetch(fetchURL);\n        const data = await response.json();\n        if (!isDataMocked) {\n          setApiData(data.data);\n        } else {\n          if (userID) {\n            setMockedData(data.find(item => item.id === parseInt(userID) || item.userId === parseInt(userID)));\n          }\n        }\n      } catch (err) {\n        console.log(err);\n        if (urlMockedData) {\n          fetchData(urlMockedData, true, setErrorMocked);\n        }\n        errorSetState(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData(urlAPI, false, setErrorAPI);\n  }, [urlAPI, userID, urlMockedData]);\n  return {\n    isLoading,\n    apiData,\n    mockedData,\n    errorAPI,\n    errorMocked\n  };\n}\n_s(useFetch, \"s+3Nr6tojLyt+Y5PepNym97davc=\");","map":{"version":3,"names":["useState","useEffect","useFetch","urlAPI","userID","urlMockedData","_s","apiData","setApiData","mockedData","setMockedData","isLoading","setLoading","errorAPI","setErrorAPI","errorMocked","setErrorMocked","fetchData","fetchURL","isDataMocked","errorSetState","response","fetch","data","json","find","item","id","parseInt","userId","err","console","log"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * This function will fetch data from an API, if the API fails, it fetches data from mocked data.\r\n * Also return a boolean indicating whether the data is loading, and two booleans indicating whether there was errors on the API and mocked data.\r\n *\r\n * @category Custom Hooks\r\n * @param {string} urlAPI - The url of the API.\r\n * @param {string} userID - The userID for the mocked data.\r\n * @param {string} urlMockedData - The url of the mocked data.\r\n * @returns An object with the following properties: isLoading, apiData, mockedData, errorAPI, errorMocked.\r\n */\r\nexport function useFetch(urlAPI, userID, urlMockedData) {\r\n  const [apiData, setApiData] = useState(null);\r\n  const [mockedData, setMockedData] = useState(null);\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [errorAPI, setErrorAPI] = useState(false);\r\n  const [errorMocked, setErrorMocked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    async function fetchData(fetchURL, isDataMocked, errorSetState) {\r\n      try {\r\n        const response = await fetch(fetchURL);\r\n        const data = await response.json();\r\n        if (!isDataMocked) {\r\n          setApiData(data.data);\r\n        } else {\r\n          if (userID) {\r\n            setMockedData(\r\n              data.find(\r\n                (item) => item.id === parseInt(userID) || item.userId === parseInt(userID)\r\n              )\r\n            );\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n        if (urlMockedData) {\r\n          fetchData(urlMockedData, true, setErrorMocked);\r\n        }\r\n        errorSetState(true);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n    fetchData(urlAPI, false, setErrorAPI);\r\n  }, [urlAPI, userID, urlMockedData]);\r\n\r\n  return { isLoading, apiData, mockedData, errorAPI, errorMocked };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAEC,MAAM,EAAEC,aAAa,EAAE;EAAAC,EAAA;EACtD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACW,SAAS,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACdW,UAAU,CAAC,IAAI,CAAC;IAChB,eAAeK,SAASA,CAACC,QAAQ,EAAEC,YAAY,EAAEC,aAAa,EAAE;MAC9D,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,CAAC;QACtC,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAI,CAACL,YAAY,EAAE;UACjBX,UAAU,CAACe,IAAI,CAACA,IAAI,CAAC;QACvB,CAAC,MAAM;UACL,IAAInB,MAAM,EAAE;YACVM,aAAa,CACXa,IAAI,CAACE,IAAI,CACNC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKC,QAAQ,CAACxB,MAAM,CAAC,IAAIsB,IAAI,CAACG,MAAM,KAAKD,QAAQ,CAACxB,MAAM,CAC3E,CACF,CAAC;UACH;QACF;MACF,CAAC,CAAC,OAAO0B,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,IAAIzB,aAAa,EAAE;UACjBY,SAAS,CAACZ,aAAa,EAAE,IAAI,EAAEW,cAAc,CAAC;QAChD;QACAI,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;IACAK,SAAS,CAACd,MAAM,EAAE,KAAK,EAAEW,WAAW,CAAC;EACvC,CAAC,EAAE,CAACX,MAAM,EAAEC,MAAM,EAAEC,aAAa,CAAC,CAAC;EAEnC,OAAO;IAAEM,SAAS;IAAEJ,OAAO;IAAEE,UAAU;IAAEI,QAAQ;IAAEE;EAAY,CAAC;AAClE;AAACT,EAAA,CAtCeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}