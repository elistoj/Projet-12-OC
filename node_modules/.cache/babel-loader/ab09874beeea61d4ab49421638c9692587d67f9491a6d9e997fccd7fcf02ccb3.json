{"ast":null,"code":"const BASE_URL = 'http://localhost:3000/user';\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\n  }\n  return response.json();\n}\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}`);\n    const userData = await checkResponse(response);\n    return userData; // No need to map here\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}/activity`);\n    const userActivity = await checkResponse(response);\n    return userActivity.sessions || []; // Return sessions or an empty array\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}/average-sessions`);\n    const userAverageSessions = await checkResponse(response);\n    return userAverageSessions.sessions || []; // Return sessions or an empty array\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    throw error;\n  }\n}\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}/performance`);\n    const userPerformance = await checkResponse(response);\n    return userPerformance.data || []; // Return data or an empty array\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["BASE_URL","checkResponse","response","ok","errorText","text","Error","status","json","fetchUserData","userId","fetch","userData","error","console","fetchUserActivity","userActivity","sessions","fetchUserAverageSessions","userAverageSessions","fetchUserPerformance","userPerformance","data"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3000/user';\r\n\r\nasync function checkResponse(response) {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}`);\r\n    const userData = await checkResponse(response);\r\n    return userData; // No need to map here\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/activity`);\r\n    const userActivity = await checkResponse(response);\r\n    return userActivity.sessions || []; // Return sessions or an empty array\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/average-sessions`);\r\n    const userAverageSessions = await checkResponse(response);\r\n    return userAverageSessions.sessions || []; // Return sessions or an empty array\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/performance`);\r\n    const userPerformance = await checkResponse(response);\r\n    return userPerformance.data || []; // Return data or an empty array\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,4BAA4B;AAE7C,eAAeC,aAAaA,CAACC,QAAQ,EAAE;EACrC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAAC,wCAAwCJ,QAAQ,CAACK,MAAM,cAAcH,SAAS,EAAE,CAAC;EACnG;EACA,OAAOF,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAeC,aAAaA,CAACC,MAAM,EAAE;EAC1C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,QAAQ,IAAIU,MAAM,EAAE,CAAC;IACrD,MAAME,QAAQ,GAAG,MAAMX,aAAa,CAACC,QAAQ,CAAC;IAC9C,OAAOU,QAAQ,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeE,iBAAiBA,CAACL,MAAM,EAAE;EAC9C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,QAAQ,IAAIU,MAAM,WAAW,CAAC;IAC9D,MAAMM,YAAY,GAAG,MAAMf,aAAa,CAACC,QAAQ,CAAC;IAClD,OAAOc,YAAY,CAACC,QAAQ,IAAI,EAAE,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeK,wBAAwBA,CAACR,MAAM,EAAE;EACrD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,QAAQ,IAAIU,MAAM,mBAAmB,CAAC;IACtE,MAAMS,mBAAmB,GAAG,MAAMlB,aAAa,CAACC,QAAQ,CAAC;IACzD,OAAOiB,mBAAmB,CAACF,QAAQ,IAAI,EAAE,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeO,oBAAoBA,CAACV,MAAM,EAAE;EACjD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,QAAQ,IAAIU,MAAM,cAAc,CAAC;IACjE,MAAMW,eAAe,GAAG,MAAMpB,aAAa,CAACC,QAAQ,CAAC;IACrD,OAAOmB,eAAe,CAACC,IAAI,IAAI,EAAE,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}