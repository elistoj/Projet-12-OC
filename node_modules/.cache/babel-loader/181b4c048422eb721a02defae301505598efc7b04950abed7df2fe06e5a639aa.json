{"ast":null,"code":"const BASE_URL = 'https://http://localhost:3000';\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\n  }\n  return response.json();\n}\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}`);\n    const userData = await checkResponse(response);\n    return mapUserData(userData); // Format data\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/${userId}/events`);\n    const userActivity = await checkResponse(response);\n    return mapUserActivity(userActivity); // Format data\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\n\n// Assuming these endpoints exist on your custom backend API\nconst CUSTOM_API_BASE_URL = 'https://your-backend-api.com/users';\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`${CUSTOM_API_BASE_URL}/${userId}/average-sessions`);\n    const userAverageSessions = await checkResponse(response);\n    return mapUserAverageSessions(userAverageSessions); // Format data\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    throw error;\n  }\n}\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`${CUSTOM_API_BASE_URL}/${userId}/performance`);\n    const userPerformance = await checkResponse(response);\n    return mapUserPerformance(userPerformance); // Format data\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    throw error;\n  }\n}\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: userData.firstName,\n      lastName: userData.lastName\n    },\n    keyData: {\n      calorieCount: userData.calorieCount,\n      proteinCount: userData.proteinCount,\n      carbohydrateCount: userData.carbohydrateCount,\n      lipidCount: userData.lipidCount\n    },\n    score: userData.score\n  };\n}\nfunction mapUserActivity(userActivity) {\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.map(session => ({\n      day: session.created_at,\n      sessionLength: session.sessionLength // Assuming `sessionLength` is a valid field\n    }))\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => ({\n      day: session.day,\n      averageDuration: session.sessionLength\n    }))\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  return {\n    userId: userPerformance.userId,\n    data: userPerformance.data.map(item => ({\n      kind: item.kind,\n      value: item.value\n    }))\n  };\n}","map":{"version":3,"names":["BASE_URL","checkResponse","response","ok","errorText","text","Error","status","json","fetchUserData","userId","fetch","userData","mapUserData","error","console","fetchUserActivity","userActivity","mapUserActivity","CUSTOM_API_BASE_URL","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance","id","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","score","sessions","map","session","day","created_at","sessionLength","averageDuration","data","item","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'https://http://localhost:3000';\r\n\r\nasync function checkResponse(response) {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}`);\r\n    const userData = await checkResponse(response);\r\n    return mapUserData(userData);  // Format data\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/events`);\r\n    const userActivity = await checkResponse(response);\r\n    return mapUserActivity(userActivity);  // Format data\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Assuming these endpoints exist on your custom backend API\r\nconst CUSTOM_API_BASE_URL = 'https://your-backend-api.com/users';\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${CUSTOM_API_BASE_URL}/${userId}/average-sessions`);\r\n    const userAverageSessions = await checkResponse(response);\r\n    return mapUserAverageSessions(userAverageSessions);  // Format data\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${CUSTOM_API_BASE_URL}/${userId}/performance`);\r\n    const userPerformance = await checkResponse(response);\r\n    return mapUserPerformance(userPerformance);  // Format data\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.calorieCount,\r\n      proteinCount: userData.proteinCount,\r\n      carbohydrateCount: userData.carbohydrateCount,\r\n      lipidCount: userData.lipidCount,\r\n    },\r\n    score: userData.score,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.map(session => ({\r\n      day: session.created_at,\r\n      sessionLength: session.sessionLength,  // Assuming `sessionLength` is a valid field\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day,\r\n      averageDuration: session.sessionLength,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind,\r\n      value: item.value,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}