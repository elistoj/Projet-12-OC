{"ast":null,"code":"const BASE_URL = 'http://localhost:3001/api';\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\n    throw new Error(`Network response was not ok. Status: ${response.status}`);\n  }\n\n  // Check if the response is JSON\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.indexOf('application/json') !== -1) {\n    return response.json();\n  } else {\n    const textResponse = await response.text();\n    console.error('Expected JSON, but received:', textResponse);\n    throw new Error('Received non-JSON response');\n  }\n}\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\n    const userData = await checkResponse(response);\n    return mapUserData(userData);\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\nconst API_KEY = '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';\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`, {\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`\n      }\n    });\n    const userActivity = await checkResponse(response);\n    return mapUserActivity(userActivity); // Format data\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`, {\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`\n      }\n    });\n    const userAverageSessions = await checkResponse(response);\n    return mapUserAverageSessions(userAverageSessions); // Format data\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    throw error;\n  }\n}\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`, {\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`\n      }\n    });\n    const userPerformance = await checkResponse(response);\n    return mapUserPerformance(userPerformance); // Format data\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    throw error;\n  }\n}\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: userData.firstName,\n      lastName: userData.lastName\n    },\n    keyData: {\n      calorieCount: userData.calorieCount,\n      proteinCount: userData.proteinCount,\n      carbohydrateCount: userData.carbohydrateCount,\n      lipidCount: userData.lipidCount\n    },\n    score: userData.score\n  };\n}\nfunction mapUserActivity(userActivity) {\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.map(session => ({\n      day: session.created_at,\n      sessionLength: session.sessionLength // Assuming `sessionLength` is a valid field\n    }))\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => ({\n      day: session.day,\n      averageDuration: session.sessionLength\n    }))\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  return {\n    userId: userPerformance.userId,\n    data: userPerformance.data.map(item => ({\n      kind: item.kind,\n      value: item.value\n    }))\n  };\n}","map":{"version":3,"names":["BASE_URL","checkResponse","response","ok","errorText","text","console","error","status","Error","contentType","headers","get","indexOf","json","textResponse","fetchUserData","userId","fetch","userData","mapUserData","API_KEY","fetchUserActivity","userActivity","mapUserActivity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance","id","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","score","sessions","map","session","day","created_at","sessionLength","averageDuration","data","item","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3001/api';\r\n\r\nasync function checkResponse(response) {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\r\n    throw new Error(`Network response was not ok. Status: ${response.status}`);\r\n  }\r\n\r\n  // Check if the response is JSON\r\n  const contentType = response.headers.get('content-type');\r\n  if (contentType && contentType.indexOf('application/json') !== -1) {\r\n    return response.json();\r\n  } else {\r\n    const textResponse = await response.text();\r\n    console.error('Expected JSON, but received:', textResponse);\r\n    throw new Error('Received non-JSON response');\r\n  }\r\n}\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\r\n    const userData = await checkResponse(response);\r\n    return mapUserData(userData);\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nconst API_KEY = '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';\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${API_KEY}`\r\n      }\r\n    });\r\n    const userActivity = await checkResponse(response);\r\n    return mapUserActivity(userActivity);  // Format data\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${API_KEY}`\r\n      }\r\n    });\r\n    const userAverageSessions = await checkResponse(response);\r\n    return mapUserAverageSessions(userAverageSessions);  // Format data\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${API_KEY}`\r\n      }\r\n    });\r\n    const userPerformance = await checkResponse(response);\r\n    return mapUserPerformance(userPerformance);  // Format data\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.calorieCount,\r\n      proteinCount: userData.proteinCount,\r\n      carbohydrateCount: userData.carbohydrateCount,\r\n      lipidCount: userData.lipidCount,\r\n    },\r\n    score: userData.score,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.map(session => ({\r\n      day: session.created_at,\r\n      sessionLength: session.sessionLength,  // Assuming `sessionLength` is a valid field\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day,\r\n      averageDuration: session.sessionLength,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind,\r\n      value: item.value,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}