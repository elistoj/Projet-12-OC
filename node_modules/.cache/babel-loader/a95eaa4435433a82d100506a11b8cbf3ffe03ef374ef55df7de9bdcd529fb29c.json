{"ast":null,"code":"const BASE_URL = 'http://localhost:3000/user';\nasync function fetchData(url, mockData, mapFunction) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      if (response.status === 404) {\n        console.warn(`Data not found at ${url}, using mocked data.`);\n        return mapFunction(mockData);\n      }\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return mapFunction(data.data);\n  } catch (error) {\n    console.error(`Fetch error: ${error.message}`);\n    return null; // or you can choose to return some default mock data\n  }\n}\nexport function fetchUserData(userId) {\n  const url = `${BASE_URL}/${userId}`;\n  const mockUserData = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\n  return fetchData(url, mockUserData, mapUserData);\n}\nexport function fetchUserActivity(userId) {\n  const url = `${BASE_URL}/${userId}/activity`;\n  const mockUserActivity = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\n  return fetchData(url, mockUserActivity, mapUserActivity);\n}\nexport function fetchUserAverageSessions(userId) {\n  const url = `${BASE_URL}/${userId}/average-sessions`;\n  const mockUserAverageSessions = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\n  return fetchData(url, mockUserAverageSessions, mapUserAverageSessions);\n}\nexport function fetchUserPerformance(userId) {\n  const url = `${BASE_URL}/${userId}/performance`;\n  const mockUserPerformance = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\n  return fetchData(url, mockUserPerformance, mapUserPerformance);\n}","map":{"version":3,"names":["BASE_URL","fetchData","url","mockData","mapFunction","response","fetch","ok","status","console","warn","Error","data","json","error","message","fetchUserData","userId","mockUserData","USER_MAIN_DATA","find","user","id","parseInt","mapUserData","fetchUserActivity","mockUserActivity","USER_ACTIVITY","activity","mapUserActivity","fetchUserAverageSessions","mockUserAverageSessions","USER_AVERAGE_SESSIONS","session","mapUserAverageSessions","fetchUserPerformance","mockUserPerformance","USER_PERFORMANCE","performance","mapUserPerformance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/Page/Profile.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3000/user';\r\n\r\nasync function fetchData(url, mockData, mapFunction) {\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        console.warn(`Data not found at ${url}, using mocked data.`);\r\n        return mapFunction(mockData);\r\n      }\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return mapFunction(data.data);\r\n  } catch (error) {\r\n    console.error(`Fetch error: ${error.message}`);\r\n    return null; // or you can choose to return some default mock data\r\n  }\r\n}\r\n\r\nexport function fetchUserData(userId) {\r\n  const url = `${BASE_URL}/${userId}`;\r\n  const mockUserData = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\r\n  return fetchData(url, mockUserData, mapUserData);\r\n}\r\n\r\nexport function fetchUserActivity(userId) {\r\n  const url = `${BASE_URL}/${userId}/activity`;\r\n  const mockUserActivity = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\r\n  return fetchData(url, mockUserActivity, mapUserActivity);\r\n}\r\n\r\nexport function fetchUserAverageSessions(userId) {\r\n  const url = `${BASE_URL}/${userId}/average-sessions`;\r\n  const mockUserAverageSessions = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\r\n  return fetchData(url, mockUserAverageSessions, mapUserAverageSessions);\r\n}\r\n\r\nexport function fetchUserPerformance(userId) {\r\n  const url = `${BASE_URL}/${userId}/performance`;\r\n  const mockUserPerformance = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\r\n  return fetchData(url, mockUserPerformance, mapUserPerformance);\r\n}\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,4BAA4B;AAE7C,eAAeC,SAASA,CAACC,GAAG,EAAEC,QAAQ,EAAEC,WAAW,EAAE;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,CAAC;IACjC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;MAChB,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BC,OAAO,CAACC,IAAI,CAAC,qBAAqBR,GAAG,sBAAsB,CAAC;QAC5D,OAAOE,WAAW,CAACD,QAAQ,CAAC;MAC9B;MACA,MAAM,IAAIQ,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOT,WAAW,CAACQ,IAAI,CAACA,IAAI,CAAC;EAC/B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,gBAAgBA,KAAK,CAACC,OAAO,EAAE,CAAC;IAC9C,OAAO,IAAI,CAAC,CAAC;EACf;AACF;AAEA,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAE;EACpC,MAAMf,GAAG,GAAG,GAAGF,QAAQ,IAAIiB,MAAM,EAAE;EACnC,MAAMC,YAAY,GAAGf,QAAQ,CAACgB,cAAc,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKC,QAAQ,CAACN,MAAM,CAAC,CAAC;EACvF,OAAOhB,SAAS,CAACC,GAAG,EAAEgB,YAAY,EAAEM,WAAW,CAAC;AAClD;AAEA,OAAO,SAASC,iBAAiBA,CAACR,MAAM,EAAE;EACxC,MAAMf,GAAG,GAAG,GAAGF,QAAQ,IAAIiB,MAAM,WAAW;EAC5C,MAAMS,gBAAgB,GAAGvB,QAAQ,CAACwB,aAAa,CAACP,IAAI,CAACQ,QAAQ,IAAIA,QAAQ,CAACX,MAAM,KAAKM,QAAQ,CAACN,MAAM,CAAC,CAAC;EACtG,OAAOhB,SAAS,CAACC,GAAG,EAAEwB,gBAAgB,EAAEG,eAAe,CAAC;AAC1D;AAEA,OAAO,SAASC,wBAAwBA,CAACb,MAAM,EAAE;EAC/C,MAAMf,GAAG,GAAG,GAAGF,QAAQ,IAAIiB,MAAM,mBAAmB;EACpD,MAAMc,uBAAuB,GAAG5B,QAAQ,CAAC6B,qBAAqB,CAACZ,IAAI,CAACa,OAAO,IAAIA,OAAO,CAAChB,MAAM,KAAKM,QAAQ,CAACN,MAAM,CAAC,CAAC;EACnH,OAAOhB,SAAS,CAACC,GAAG,EAAE6B,uBAAuB,EAAEG,sBAAsB,CAAC;AACxE;AAEA,OAAO,SAASC,oBAAoBA,CAAClB,MAAM,EAAE;EAC3C,MAAMf,GAAG,GAAG,GAAGF,QAAQ,IAAIiB,MAAM,cAAc;EAC/C,MAAMmB,mBAAmB,GAAGjC,QAAQ,CAACkC,gBAAgB,CAACjB,IAAI,CAACkB,WAAW,IAAIA,WAAW,CAACrB,MAAM,KAAKM,QAAQ,CAACN,MAAM,CAAC,CAAC;EAClH,OAAOhB,SAAS,CAACC,GAAG,EAAEkC,mBAAmB,EAAEG,kBAAkB,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}