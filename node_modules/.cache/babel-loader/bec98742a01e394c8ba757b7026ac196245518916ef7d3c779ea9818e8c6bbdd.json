{"ast":null,"code":"const BASE_URL = 'http://localhost:3000/api/data'; // Заменете со локалната патека до вашите JSON фајлови\n\n// Функција за вчитување на податоци за корисник\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`../data/${userId}/user.json`); // Локална патека до JSON фајл за корисникот\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const userData = await response.json();\n    return mapUserData(userData);\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\n\n// Функција за вчитување на податоци за активности на корисник\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`../data/${userId}/activity.json`); // Локална патека до JSON фајл за активностите на корисникот\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const userActivity = await response.json();\n    return mapUserActivity(userActivity);\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\n\n// Функција за вчитување на податоци за просечни сесии на корисник\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`../data/${userId}/average.json`); // Локална патека до JSON фајл за просечните сесии на корисникот\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const userAverageSessions = await response.json();\n    return mapUserAverageSessions(userAverageSessions);\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    throw error;\n  }\n}\n\n// Функција за вчитување на податоци за перформанси на корисник\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`../data/${userId}/performance.json`); // Локална патека до JSON фајл за перформансите на корисникот\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const userPerformance = await response.json();\n    return mapUserPerformance(userPerformance);\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    throw error;\n  }\n}\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: userData.firstName,\n      lastName: userData.lastName\n    },\n    keyData: {\n      calorieCount: userData.calorieCount,\n      proteinCount: userData.proteinCount,\n      carbohydrateCount: userData.carbohydrateCount,\n      lipidCount: userData.lipidCount\n    },\n    score: userData.score\n  };\n}\nfunction mapUserActivity(userActivity) {\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.map(session => ({\n      day: session.created_at,\n      sessionLength: session.sessionLength // Assuming `sessionLength` is a valid field\n    }))\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => ({\n      day: session.day,\n      averageDuration: session.sessionLength\n    }))\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  return {\n    userId: userPerformance.userId,\n    data: userPerformance.data.map(item => ({\n      kind: item.kind,\n      value: item.value\n    }))\n  };\n}","map":{"version":3,"names":["BASE_URL","fetchUserData","userId","response","fetch","ok","Error","status","userData","json","mapUserData","error","console","fetchUserActivity","userActivity","mapUserActivity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance","id","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","score","sessions","map","session","day","created_at","sessionLength","averageDuration","data","item","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3000/api/data';  // Заменете со локалната патека до вашите JSON фајлови\r\n\r\n// Функција за вчитување на податоци за корисник\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`../data/${userId}/user.json`);  // Локална патека до JSON фајл за корисникот\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const userData = await response.json();\r\n    return mapUserData(userData);\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Функција за вчитување на податоци за активности на корисник\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`../data/${userId}/activity.json`);  // Локална патека до JSON фајл за активностите на корисникот\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const userActivity = await response.json();\r\n    return mapUserActivity(userActivity);\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Функција за вчитување на податоци за просечни сесии на корисник\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`../data/${userId}/average.json`);  // Локална патека до JSON фајл за просечните сесии на корисникот\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const userAverageSessions = await response.json();\r\n    return mapUserAverageSessions(userAverageSessions);\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Функција за вчитување на податоци за перформанси на корисник\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`../data/${userId}/performance.json`);  // Локална патека до JSON фајл за перформансите на корисникот\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const userPerformance = await response.json();\r\n    return mapUserPerformance(userPerformance);\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.calorieCount,\r\n      proteinCount: userData.proteinCount,\r\n      carbohydrateCount: userData.carbohydrateCount,\r\n      lipidCount: userData.lipidCount,\r\n    },\r\n    score: userData.score,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.map(session => ({\r\n      day: session.created_at,\r\n      sessionLength: session.sessionLength,  // Assuming `sessionLength` is a valid field\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day,\r\n      averageDuration: session.sessionLength,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind,\r\n      value: item.value,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}