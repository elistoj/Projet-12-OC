{"ast":null,"code":"const BASE_URL = 'https://projet-12-oc.vercel.app';\nconst handleResponse = async response => {\n  const contentType = response.headers.get('content-type');\n  const text = await response.text();\n  console.log('Response text:', text); // Логирање на целосниот одговор\n\n  if (!response.ok || !contentType.includes('application/json')) {\n    throw new Error(`Failed to fetch data. Status: ${response.status}, Text: ${text}`);\n  }\n  return JSON.parse(text);\n};\nexport const fetchUserData = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/userData/${userId}`);\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching user data\", error);\n    return null;\n  }\n};\nexport const fetchUserActivity = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/userActivity/${userId}`);\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching user activity\", error);\n    return null;\n  }\n};\nexport const fetchUserAverageSessions = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/userAverageSessions/${userId}`);\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching user average sessions\", error);\n    return null;\n  }\n};\nexport const fetchUserPerformance = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/userPerformance/${userId}`);\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching user performance\", error);\n    return null;\n  }\n};","map":{"version":3,"names":["BASE_URL","handleResponse","response","contentType","headers","get","text","console","log","ok","includes","Error","status","JSON","parse","fetchUserData","userId","fetch","error","fetchUserActivity","fetchUserAverageSessions","fetchUserPerformance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'https://projet-12-oc.vercel.app';\r\n\r\nconst handleResponse = async (response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  const text = await response.text();\r\n  console.log('Response text:', text); // Логирање на целосниот одговор\r\n\r\n  if (!response.ok || !contentType.includes('application/json')) {\r\n    throw new Error(`Failed to fetch data. Status: ${response.status}, Text: ${text}`);\r\n  }\r\n\r\n  return JSON.parse(text);\r\n};\r\n\r\nexport const fetchUserData = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/userData/${userId}`);\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user data\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const fetchUserActivity = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/userActivity/${userId}`);\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user activity\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const fetchUserAverageSessions = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/userAverageSessions/${userId}`);\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user average sessions\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const fetchUserPerformance = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/userPerformance/${userId}`);\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user performance\", error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,iCAAiC;AAElD,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,MAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACxD,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;EAClCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC,CAAC,CAAC;;EAErC,IAAI,CAACJ,QAAQ,CAACO,EAAE,IAAI,CAACN,WAAW,CAACO,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC7D,MAAM,IAAIC,KAAK,CAAC,iCAAiCT,QAAQ,CAACU,MAAM,WAAWN,IAAI,EAAE,CAAC;EACpF;EAEA,OAAOO,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC;AACzB,CAAC;AAED,OAAO,MAAMS,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC7C,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMe,KAAK,CAAC,GAAGjB,QAAQ,aAAagB,MAAM,EAAE,CAAC;IAC9D,OAAO,MAAMf,cAAc,CAACC,QAAQ,CAAC;EACvC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOH,MAAM,IAAK;EACjD,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMe,KAAK,CAAC,GAAGjB,QAAQ,iBAAiBgB,MAAM,EAAE,CAAC;IAClE,OAAO,MAAMf,cAAc,CAACC,QAAQ,CAAC;EACvC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAME,wBAAwB,GAAG,MAAOJ,MAAM,IAAK;EACxD,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMe,KAAK,CAAC,GAAGjB,QAAQ,wBAAwBgB,MAAM,EAAE,CAAC;IACzE,OAAO,MAAMf,cAAc,CAACC,QAAQ,CAAC;EACvC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMG,oBAAoB,GAAG,MAAOL,MAAM,IAAK;EACpD,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMe,KAAK,CAAC,GAAGjB,QAAQ,oBAAoBgB,MAAM,EAAE,CAAC;IACrE,OAAO,MAAMf,cAAc,CAACC,QAAQ,CAAC;EACvC,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}