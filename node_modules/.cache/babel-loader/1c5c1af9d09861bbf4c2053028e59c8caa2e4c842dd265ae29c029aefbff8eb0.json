{"ast":null,"code":"// apiService.js\n\nconst BASE_URL = 'https://api.example.com'; // Replace with your actual API base URL\n\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userData = await response.json();\n    return mapUserData(userData);\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userActivity = await response.json();\n    return mapUserActivity(userActivity);\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userAverageSessions = await response.json();\n    return mapUserAverageSessions(userAverageSessions);\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    throw error;\n  }\n}\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userPerformance = await response.json();\n    return mapUserPerformance(userPerformance);\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    throw error;\n  }\n}\n\n// Mapping functions to standardize fetched data\nfunction mapUserData(userData) {\n  // Implement your mapping logic here\n  return {\n    // Return standardized user data object\n  };\n}\nfunction mapUserActivity(userActivity) {\n  // Implement your mapping logic here\n  return {\n    // Return standardized user activity object\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  // Implement your mapping logic here\n  return {\n    // Return standardized user average sessions object\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  // Implement your mapping logic here\n  return {\n    // Return standardized user performance object\n  };\n}","map":{"version":3,"names":["BASE_URL","fetchUserData","userId","response","fetch","ok","Error","userData","json","mapUserData","error","console","fetchUserActivity","userActivity","mapUserActivity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["// apiService.js\r\n\r\nconst BASE_URL = 'https://api.example.com'; // Replace with your actual API base URL\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userData = await response.json();\r\n    return mapUserData(userData);\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userActivity = await response.json();\r\n    return mapUserActivity(userActivity);\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userAverageSessions = await response.json();\r\n    return mapUserAverageSessions(userAverageSessions);\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userPerformance = await response.json();\r\n    return mapUserPerformance(userPerformance);\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Mapping functions to standardize fetched data\r\nfunction mapUserData(userData) {\r\n  // Implement your mapping logic here\r\n  return {\r\n    // Return standardized user data object\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  // Implement your mapping logic here\r\n  return {\r\n    // Return standardized user activity object\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  // Implement your mapping logic here\r\n  return {\r\n    // Return standardized user average sessions object\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  // Implement your mapping logic here\r\n  return {\r\n    // Return standardized user performance object\r\n  };\r\n}\r\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAG,yBAAyB,CAAC,CAAC;;AAE5C,OAAO,eAAeC,aAAaA,CAACC,MAAM,EAAE;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,UAAUE,MAAM,EAAE,CAAC;IAC3D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACtC,OAAOC,WAAW,CAACF,QAAQ,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeE,iBAAiBA,CAACV,MAAM,EAAE;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,UAAUE,MAAM,WAAW,CAAC;IACpE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,MAAMO,YAAY,GAAG,MAAMV,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC1C,OAAOM,eAAe,CAACD,YAAY,CAAC;EACtC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeK,wBAAwBA,CAACb,MAAM,EAAE;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,UAAUE,MAAM,mBAAmB,CAAC;IAC5E,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,MAAMU,mBAAmB,GAAG,MAAMb,QAAQ,CAACK,IAAI,CAAC,CAAC;IACjD,OAAOS,sBAAsB,CAACD,mBAAmB,CAAC;EACpD,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeQ,oBAAoBA,CAAChB,MAAM,EAAE;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,UAAUE,MAAM,cAAc,CAAC;IACvE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,MAAMa,eAAe,GAAG,MAAMhB,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC7C,OAAOY,kBAAkB,CAACD,eAAe,CAAC;EAC5C,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,SAASD,WAAWA,CAACF,QAAQ,EAAE;EAC7B;EACA,OAAO;IACL;EAAA,CACD;AACH;AAEA,SAASO,eAAeA,CAACD,YAAY,EAAE;EACrC;EACA,OAAO;IACL;EAAA,CACD;AACH;AAEA,SAASI,sBAAsBA,CAACD,mBAAmB,EAAE;EACnD;EACA,OAAO;IACL;EAAA,CACD;AACH;AAEA,SAASI,kBAAkBA,CAACD,eAAe,EAAE;EAC3C;EACA,OAAO;IACL;EAAA,CACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}