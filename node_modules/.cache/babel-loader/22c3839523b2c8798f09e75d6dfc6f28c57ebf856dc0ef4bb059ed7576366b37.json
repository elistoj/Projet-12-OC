{"ast":null,"code":"import mockData from '../mockData.json';\nconst BASE_URL = 'http://localhost:3000/user';\nasync function fetchData(url, mockData, mapFunction) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      if (response.status === 404) {\n        console.warn(`Data not found at ${url}, using mocked data.`);\n        return mapFunction(mockData);\n      }\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return mapFunction(data.data);\n  } catch (error) {\n    console.error(`Fetch error: ${error.message}`);\n    return null; // or you can choose to return some default mock data\n  }\n}\nexport function fetchUserData(userId) {\n  const url = `${BASE_URL}/${userId}`;\n  const mockUserData = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\n  return fetchData(url, mockUserData, mapUserData);\n}\nexport function fetchUserActivity(userId) {\n  const url = `${BASE_URL}/${userId}/activity`;\n  const mockUserActivity = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\n  return fetchData(url, mockUserActivity, mapUserActivity);\n}\nexport function fetchUserAverageSessions(userId) {\n  const url = `${BASE_URL}/${userId}/average-sessions`;\n  const mockUserAverageSessions = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\n  return fetchData(url, mockUserAverageSessions, mapUserAverageSessions);\n}\nexport function fetchUserPerformance(userId) {\n  const url = `${BASE_URL}/${userId}/performance`;\n  const mockUserPerformance = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\n  return fetchData(url, mockUserPerformance, mapUserPerformance);\n}\nfunction mapUserData(userData) {\n  var _userData$TodayScore, _userData$userInfos$f, _userData$userInfos, _userData$userInfos$l, _userData$userInfos2, _userData$keyData$cal, _userData$keyData, _userData$keyData$pro, _userData$keyData2, _userData$keyData$car, _userData$keyData3, _userData$keyData$lip, _userData$keyData4;\n  const scoreToUse = userData.score !== undefined ? userData.score : (_userData$TodayScore = userData.TodayScore) !== null && _userData$TodayScore !== void 0 ? _userData$TodayScore : 0;\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: (_userData$userInfos$f = (_userData$userInfos = userData.userInfos) === null || _userData$userInfos === void 0 ? void 0 : _userData$userInfos.firstName) !== null && _userData$userInfos$f !== void 0 ? _userData$userInfos$f : '',\n      lastName: (_userData$userInfos$l = (_userData$userInfos2 = userData.userInfos) === null || _userData$userInfos2 === void 0 ? void 0 : _userData$userInfos2.lastName) !== null && _userData$userInfos$l !== void 0 ? _userData$userInfos$l : ''\n    },\n    keyData: {\n      calorieCount: (_userData$keyData$cal = (_userData$keyData = userData.keyData) === null || _userData$keyData === void 0 ? void 0 : _userData$keyData.calorieCount) !== null && _userData$keyData$cal !== void 0 ? _userData$keyData$cal : 0,\n      proteinCount: (_userData$keyData$pro = (_userData$keyData2 = userData.keyData) === null || _userData$keyData2 === void 0 ? void 0 : _userData$keyData2.proteinCount) !== null && _userData$keyData$pro !== void 0 ? _userData$keyData$pro : 0,\n      carbohydrateCount: (_userData$keyData$car = (_userData$keyData3 = userData.keyData) === null || _userData$keyData3 === void 0 ? void 0 : _userData$keyData3.carbohydrateCount) !== null && _userData$keyData$car !== void 0 ? _userData$keyData$car : 0,\n      lipidCount: (_userData$keyData$lip = (_userData$keyData4 = userData.keyData) === null || _userData$keyData4 === void 0 ? void 0 : _userData$keyData4.lipidCount) !== null && _userData$keyData$lip !== void 0 ? _userData$keyData$lip : 0\n    },\n    score: scoreToUse\n  };\n}\nfunction mapUserActivity(userActivity) {\n  if (!userActivity || !Array.isArray(userActivity.sessions)) {\n    return {\n      userId: '',\n      sessions: []\n    };\n  }\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.sessions.map(session => {\n      var _session$day, _session$kilogram, _session$calories;\n      return {\n        day: (_session$day = session.day) !== null && _session$day !== void 0 ? _session$day : '',\n        kilogram: (_session$kilogram = session.kilogram) !== null && _session$kilogram !== void 0 ? _session$kilogram : 0,\n        calories: (_session$calories = session.calories) !== null && _session$calories !== void 0 ? _session$calories : 0\n      };\n    })\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  if (!userAverageSessions || !Array.isArray(userAverageSessions.sessions)) {\n    return {\n      userId: '',\n      sessions: []\n    };\n  }\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => {\n      var _session$day2, _session$sessionLengt;\n      return {\n        day: (_session$day2 = session.day) !== null && _session$day2 !== void 0 ? _session$day2 : '',\n        sessionLength: (_session$sessionLengt = session.sessionLength) !== null && _session$sessionLengt !== void 0 ? _session$sessionLengt : 0\n      };\n    })\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  if (!userPerformance || !Array.isArray(userPerformance.data)) {\n    return {\n      userId: '',\n      data: []\n    };\n  }\n  return {\n    userId: userPerformance.userId,\n    data: userPerformance.data.map(item => {\n      var _item$kind, _item$value;\n      return {\n        kind: (_item$kind = item.kind) !== null && _item$kind !== void 0 ? _item$kind : '',\n        value: (_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : 0\n      };\n    })\n  };\n}","map":{"version":3,"names":["mockData","BASE_URL","fetchData","url","mapFunction","response","fetch","ok","status","console","warn","Error","data","json","error","message","fetchUserData","userId","mockUserData","USER_MAIN_DATA","find","user","id","parseInt","mapUserData","fetchUserActivity","mockUserActivity","USER_ACTIVITY","activity","mapUserActivity","fetchUserAverageSessions","mockUserAverageSessions","USER_AVERAGE_SESSIONS","session","mapUserAverageSessions","fetchUserPerformance","mockUserPerformance","USER_PERFORMANCE","performance","mapUserPerformance","userData","_userData$TodayScore","_userData$userInfos$f","_userData$userInfos","_userData$userInfos$l","_userData$userInfos2","_userData$keyData$cal","_userData$keyData","_userData$keyData$pro","_userData$keyData2","_userData$keyData$car","_userData$keyData3","_userData$keyData$lip","_userData$keyData4","scoreToUse","score","undefined","TodayScore","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","userActivity","Array","isArray","sessions","map","_session$day","_session$kilogram","_session$calories","day","kilogram","calories","userAverageSessions","_session$day2","_session$sessionLengt","sessionLength","userPerformance","item","_item$kind","_item$value","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["import mockData from '../mockData.json';\r\n\r\nconst BASE_URL = 'http://localhost:3000/user';\r\n\r\nasync function fetchData(url, mockData, mapFunction) {\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      if (response.status === 404) {\r\n        console.warn(`Data not found at ${url}, using mocked data.`);\r\n        return mapFunction(mockData);\r\n      }\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return mapFunction(data.data);\r\n  } catch (error) {\r\n    console.error(`Fetch error: ${error.message}`);\r\n    return null; // or you can choose to return some default mock data\r\n  }\r\n}\r\n\r\nexport function fetchUserData(userId) {\r\n  const url = `${BASE_URL}/${userId}`;\r\n  const mockUserData = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\r\n  return fetchData(url, mockUserData, mapUserData);\r\n}\r\n\r\nexport function fetchUserActivity(userId) {\r\n  const url = `${BASE_URL}/${userId}/activity`;\r\n  const mockUserActivity = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\r\n  return fetchData(url, mockUserActivity, mapUserActivity);\r\n}\r\n\r\nexport function fetchUserAverageSessions(userId) {\r\n  const url = `${BASE_URL}/${userId}/average-sessions`;\r\n  const mockUserAverageSessions = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\r\n  return fetchData(url, mockUserAverageSessions, mapUserAverageSessions);\r\n}\r\n\r\nexport function fetchUserPerformance(userId) {\r\n  const url = `${BASE_URL}/${userId}/performance`;\r\n  const mockUserPerformance = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\r\n  return fetchData(url, mockUserPerformance, mapUserPerformance);\r\n}\r\n\r\nfunction mapUserData(userData) {\r\n  const scoreToUse = userData.score !== undefined ? userData.score : userData.TodayScore ?? 0;\r\n\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.userInfos?.firstName ?? '',\r\n      lastName: userData.userInfos?.lastName ?? '',\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.keyData?.calorieCount ?? 0,\r\n      proteinCount: userData.keyData?.proteinCount ?? 0,\r\n      carbohydrateCount: userData.keyData?.carbohydrateCount ?? 0,\r\n      lipidCount: userData.keyData?.lipidCount ?? 0,\r\n    },\r\n    score: scoreToUse,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  if (!userActivity || !Array.isArray(userActivity.sessions)) {\r\n    return { userId: '', sessions: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      kilogram: session.kilogram ?? 0,\r\n      calories: session.calories ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  if (!userAverageSessions || !Array.isArray(userAverageSessions.sessions)) {\r\n    return { userId: '', sessions: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      sessionLength: session.sessionLength ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  if (!userPerformance || !Array.isArray(userPerformance.data)) {\r\n    return { userId: '', data: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind ?? '',\r\n      value: item.value ?? 0,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}