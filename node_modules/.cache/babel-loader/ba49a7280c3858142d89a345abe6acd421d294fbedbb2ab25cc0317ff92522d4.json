{"ast":null,"code":"import mockData from'../mockData.json';const BASE_URL='http://localhost:3000/user';export async function fetchUserData(userId){try{const response=await fetch(\"\".concat(BASE_URL,\"/\").concat(userId));if(!response.ok){throw new Error();}const userData=await response.json();return mapUserData(userData.data);}catch(error){console.warn('Using mocked user data due to fetch error or network issue.',error.message);const userDataFromMock=mockData.USER_MAIN_DATA.find(user=>user.id===parseInt(userId));return mapUserData(userDataFromMock);}}export async function fetchUserActivity(userId){try{const response=await fetch(\"\".concat(BASE_URL,\"/\").concat(userId,\"/activity\"));if(!response.ok){throw new Error('Network response was not ok');}const userActivity=await response.json();return mapUserActivity(userActivity.data);}catch(error){console.warn('Using mocked user activity data due to fetch error or network issue.',error.message);const userActivityFromMock=mockData.USER_ACTIVITY.find(activity=>activity.userId===parseInt(userId));return mapUserActivity(userActivityFromMock);}}export async function fetchUserAverageSessions(userId){try{const response=await fetch(\"\".concat(BASE_URL,\"/\").concat(userId,\"/average-sessions\"));if(!response.ok){throw new Error('Network response was not ok');}const userAverageSessions=await response.json();return mapUserAverageSessions(userAverageSessions.data);}catch(error){console.warn('Using mocked user average sessions data due to fetch error or network issue.',error.message);const userAverageSessionsFromMock=mockData.USER_AVERAGE_SESSIONS.find(session=>session.userId===parseInt(userId));return mapUserAverageSessions(userAverageSessionsFromMock);}}export async function fetchUserPerformance(userId){try{const response=await fetch(\"\".concat(BASE_URL,\"/\").concat(userId,\"/performance\"));if(!response.ok){throw new Error('Network response was not ok');}const userPerformance=await response.json();return mapUserPerformance(userPerformance.data);}catch(error){console.warn('Using mocked user performance data due to fetch error or network issue.',error.message);const userPerformanceFromMock=mockData.USER_PERFORMANCE.find(performance=>performance.userId===parseInt(userId));return mapUserPerformance(userPerformanceFromMock);}}function mapUserData(userData){var _userData$TodayScore,_userData$userInfos$f,_userData$userInfos,_userData$userInfos$l,_userData$userInfos2,_userData$keyData$cal,_userData$keyData,_userData$keyData$pro,_userData$keyData2,_userData$keyData$car,_userData$keyData3,_userData$keyData$lip,_userData$keyData4;const scoreToUse=userData.score!==undefined?userData.score:(_userData$TodayScore=userData.TodayScore)!==null&&_userData$TodayScore!==void 0?_userData$TodayScore:0;return{id:userData.id,userInfos:{firstName:(_userData$userInfos$f=(_userData$userInfos=userData.userInfos)===null||_userData$userInfos===void 0?void 0:_userData$userInfos.firstName)!==null&&_userData$userInfos$f!==void 0?_userData$userInfos$f:'',lastName:(_userData$userInfos$l=(_userData$userInfos2=userData.userInfos)===null||_userData$userInfos2===void 0?void 0:_userData$userInfos2.lastName)!==null&&_userData$userInfos$l!==void 0?_userData$userInfos$l:''},keyData:{calorieCount:(_userData$keyData$cal=(_userData$keyData=userData.keyData)===null||_userData$keyData===void 0?void 0:_userData$keyData.calorieCount)!==null&&_userData$keyData$cal!==void 0?_userData$keyData$cal:0,proteinCount:(_userData$keyData$pro=(_userData$keyData2=userData.keyData)===null||_userData$keyData2===void 0?void 0:_userData$keyData2.proteinCount)!==null&&_userData$keyData$pro!==void 0?_userData$keyData$pro:0,carbohydrateCount:(_userData$keyData$car=(_userData$keyData3=userData.keyData)===null||_userData$keyData3===void 0?void 0:_userData$keyData3.carbohydrateCount)!==null&&_userData$keyData$car!==void 0?_userData$keyData$car:0,lipidCount:(_userData$keyData$lip=(_userData$keyData4=userData.keyData)===null||_userData$keyData4===void 0?void 0:_userData$keyData4.lipidCount)!==null&&_userData$keyData$lip!==void 0?_userData$keyData$lip:0},score:scoreToUse};}function mapUserActivity(userActivity){if(!userActivity||!Array.isArray(userActivity.sessions)){return{userId:'',sessions:[]};}return{userId:userActivity.userId,sessions:userActivity.sessions.map(session=>{var _session$day,_session$kilogram,_session$calories;return{day:(_session$day=session.day)!==null&&_session$day!==void 0?_session$day:'',kilogram:(_session$kilogram=session.kilogram)!==null&&_session$kilogram!==void 0?_session$kilogram:0,calories:(_session$calories=session.calories)!==null&&_session$calories!==void 0?_session$calories:0};})};}function mapUserAverageSessions(userAverageSessions){if(!userAverageSessions||!Array.isArray(userAverageSessions.sessions)){return{userId:'',sessions:[]};}return{userId:userAverageSessions.userId,sessions:userAverageSessions.sessions.map(session=>{var _session$day2,_session$sessionLengt;return{day:(_session$day2=session.day)!==null&&_session$day2!==void 0?_session$day2:'',sessionLength:(_session$sessionLengt=session.sessionLength)!==null&&_session$sessionLengt!==void 0?_session$sessionLengt:0};})};}function mapUserPerformance(userPerformance){if(!userPerformance||!Array.isArray(userPerformance.data)){return{userId:'',data:[]};}return{userId:userPerformance.userId,data:userPerformance.data.map(item=>{var _item$kind,_item$value;return{kind:(_item$kind=item.kind)!==null&&_item$kind!==void 0?_item$kind:'',value:(_item$value=item.value)!==null&&_item$value!==void 0?_item$value:0};})};}","map":{"version":3,"names":["mockData","BASE_URL","fetchUserData","userId","response","fetch","concat","ok","Error","userData","json","mapUserData","data","error","console","warn","message","userDataFromMock","USER_MAIN_DATA","find","user","id","parseInt","fetchUserActivity","userActivity","mapUserActivity","userActivityFromMock","USER_ACTIVITY","activity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","userAverageSessionsFromMock","USER_AVERAGE_SESSIONS","session","fetchUserPerformance","userPerformance","mapUserPerformance","userPerformanceFromMock","USER_PERFORMANCE","performance","_userData$TodayScore","_userData$userInfos$f","_userData$userInfos","_userData$userInfos$l","_userData$userInfos2","_userData$keyData$cal","_userData$keyData","_userData$keyData$pro","_userData$keyData2","_userData$keyData$car","_userData$keyData3","_userData$keyData$lip","_userData$keyData4","scoreToUse","score","undefined","TodayScore","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","Array","isArray","sessions","map","_session$day","_session$kilogram","_session$calories","day","kilogram","calories","_session$day2","_session$sessionLengt","sessionLength","item","_item$kind","_item$value","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["import mockData from '../mockData.json';\r\n\r\nconst BASE_URL = 'http://localhost:3000/user';\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}`);\r\n    if (!response.ok) {\r\n      throw new Error();\r\n    }\r\n    const userData = await response.json();\r\n    return mapUserData(userData.data);\r\n  } catch (error) {\r\n    console.warn('Using mocked user data due to fetch error or network issue.', error.message);\r\n    const userDataFromMock = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\r\n    return mapUserData(userDataFromMock);\r\n  }\r\n}\r\n\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/activity`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const userActivity = await response.json();\r\n    return mapUserActivity(userActivity.data);\r\n  } catch (error) {\r\n    console.warn('Using mocked user activity data due to fetch error or network issue.', error.message);\r\n    const userActivityFromMock = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\r\n    return mapUserActivity(userActivityFromMock);\r\n  }\r\n}\r\n\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/average-sessions`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const userAverageSessions = await response.json();\r\n    return mapUserAverageSessions(userAverageSessions.data);\r\n  } catch (error) {\r\n    console.warn('Using mocked user average sessions data due to fetch error or network issue.', error.message);\r\n    const userAverageSessionsFromMock = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\r\n    return mapUserAverageSessions(userAverageSessionsFromMock);\r\n  }\r\n}\r\n\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/${userId}/performance`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const userPerformance = await response.json();\r\n    return mapUserPerformance(userPerformance.data);\r\n  } catch (error) {\r\n    console.warn('Using mocked user performance data due to fetch error or network issue.', error.message);\r\n    const userPerformanceFromMock = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\r\n    return mapUserPerformance(userPerformanceFromMock);\r\n  }\r\n}\r\n\r\nfunction mapUserData(userData) {\r\n  const scoreToUse = userData.score !== undefined ? userData.score : userData.TodayScore ?? 0;\r\n\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.userInfos?.firstName ?? '',\r\n      lastName: userData.userInfos?.lastName ?? '',\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.keyData?.calorieCount ?? 0,\r\n      proteinCount: userData.keyData?.proteinCount ?? 0,\r\n      carbohydrateCount: userData.keyData?.carbohydrateCount ?? 0,\r\n      lipidCount: userData.keyData?.lipidCount ?? 0,\r\n    },\r\n    score: scoreToUse,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  if (!userActivity || !Array.isArray(userActivity.sessions)) {\r\n    return { userId: '', sessions: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      kilogram: session.kilogram ?? 0,\r\n      calories: session.calories ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  if (!userAverageSessions || !Array.isArray(userAverageSessions.sessions)) {\r\n    return { userId: '', sessions: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day ?? '',\r\n      sessionLength: session.sessionLength ?? 0,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  if (!userPerformance || !Array.isArray(userPerformance.data)) {\r\n    return { userId: '', data: [] };\r\n  }\r\n\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind ?? '',\r\n      value: item.value ?? 0,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}