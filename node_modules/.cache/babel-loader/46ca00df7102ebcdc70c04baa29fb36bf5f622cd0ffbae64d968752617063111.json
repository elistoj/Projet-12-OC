{"ast":null,"code":"const BASE_URL = 'https://projet-12-oc.vercel.app/user';\n\n// Функција за вчитување на податоци за корисникот\nexport const fetchUserData = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/data.js`);\n    if (!response.ok) {\n      throw new Error('Indisponibilité des données utilisateur');\n    }\n    const jsCode = await response.text();\n    const userData = eval(jsCode);\n    return userData;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données utilisateur\", error);\n    throw error;\n  }\n};\n\n// Функција за вчитување на податоци за активност на корисникот\nexport const fetchUserActivity = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/activity.js`);\n    if (!response.ok) {\n      throw new Error('Indisponibilité des données d\\'activité utilisateur');\n    }\n    const jsCode = await response.text();\n    const userActivity = eval(jsCode);\n    return userActivity;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données d'activité utilisateur\", error);\n    throw error;\n  }\n};\n\n// Функција за вчитување на податоци за просечни сесии на корисникот\nexport const fetchUserAverageSessions = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/average-sessions.js`);\n    if (!response.ok) {\n      throw new Error('Indisponibilité des sessions moyennes utilisateur');\n    }\n    const jsCode = await response.text();\n    const averageSessions = eval(jsCode);\n    return averageSessions;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des sessions moyennes utilisateur\", error);\n    throw error;\n  }\n};\n\n// Функција за вчитување на податоци за перформанси на корисникот\nexport const fetchUserPerformance = async userId => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/performance.js`);\n    if (!response.ok) {\n      throw new Error('Indisponibilité des données de performance utilisateur');\n    }\n    const jsCode = await response.text();\n    const userPerformance = eval(jsCode);\n    return userPerformance;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données de performance utilisateur\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchUserData","userId","response","fetch","ok","Error","jsCode","text","userData","eval","error","console","fetchUserActivity","userActivity","fetchUserAverageSessions","averageSessions","fetchUserPerformance","userPerformance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'https://projet-12-oc.vercel.app/user';\r\n\r\n// Функција за вчитување на податоци за корисникот\r\nexport const fetchUserData = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/data.js`);\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des données utilisateur');\r\n    }\r\n    \r\n    const jsCode = await response.text();\r\n    const userData = eval(jsCode);\r\n    \r\n    return userData;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функција за вчитување на податоци за активност на корисникот\r\nexport const fetchUserActivity = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/activity.js`);\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des données d\\'activité utilisateur');\r\n    }\r\n    \r\n    const jsCode = await response.text();\r\n    const userActivity = eval(jsCode);\r\n    \r\n    return userActivity;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données d'activité utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функција за вчитување на податоци за просечни сесии на корисникот\r\nexport const fetchUserAverageSessions = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/average-sessions.js`);\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des sessions moyennes utilisateur');\r\n    }\r\n    \r\n    const jsCode = await response.text();\r\n    const averageSessions = eval(jsCode);\r\n    \r\n    return averageSessions;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des sessions moyennes utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функција за вчитување на податоци за перформанси на корисникот\r\nexport const fetchUserPerformance = async (userId) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/user/${userId}/performance.js`);\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des données de performance utilisateur');\r\n    }\r\n    \r\n    const jsCode = await response.text();\r\n    const userPerformance = eval(jsCode);\r\n    \r\n    return userPerformance;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données de performance utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,sCAAsC;;AAEvD;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,aAAaE,MAAM,UAAU,CAAC;IACtE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpC,MAAMC,QAAQ,GAAGC,IAAI,CAACH,MAAM,CAAC;IAE7B,OAAOE,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wDAAwD,EAAEA,KAAK,CAAC;IAC9E,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,iBAAiB,GAAG,MAAOX,MAAM,IAAK;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,aAAaE,MAAM,cAAc,CAAC;IAC1E,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;IACxE;IAEA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpC,MAAMM,YAAY,GAAGJ,IAAI,CAACH,MAAM,CAAC;IAEjC,OAAOO,YAAY;EACrB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mEAAmE,EAAEA,KAAK,CAAC;IACzF,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,wBAAwB,GAAG,MAAOb,MAAM,IAAK;EACxD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,aAAaE,MAAM,sBAAsB,CAAC;IAClF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;IACtE;IAEA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpC,MAAMQ,eAAe,GAAGN,IAAI,CAACH,MAAM,CAAC;IAEpC,OAAOS,eAAe;EACxB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kEAAkE,EAAEA,KAAK,CAAC;IACxF,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,oBAAoB,GAAG,MAAOf,MAAM,IAAK;EACpD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,aAAaE,MAAM,iBAAiB,CAAC;IAC7E,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;IAC3E;IAEA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACpC,MAAMU,eAAe,GAAGR,IAAI,CAACH,MAAM,CAAC;IAEpC,OAAOW,eAAe;EACxB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uEAAuE,EAAEA,KAAK,CAAC;IAC7F,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}