{"ast":null,"code":"useEffect(() => {\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const fetchedUserData = await fetchUserData(userId);\n      const fetchedUserActivity = await fetchUserActivity(userId);\n      const fetchedUserAverageSessions = await fetchUserAverageSessions(userId);\n      const fetchedUserPerformance = await fetchUserPerformance(userId);\n      setUserData(fetchedUserData);\n      setUserActivity(fetchedUserActivity);\n      setUserAverageSessions(fetchedUserAverageSessions);\n      setUserPerformance(fetchedUserPerformance);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n      setUserData(mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId)));\n      setUserActivity(mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId)));\n      setUserAverageSessions(mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId)));\n      setUserPerformance(mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId)));\n    }\n  };\n  fetchData();\n}, [userId]);","map":{"version":3,"names":["useEffect","fetchData","setLoading","fetchedUserData","fetchUserData","userId","fetchedUserActivity","fetchUserActivity","fetchedUserAverageSessions","fetchUserAverageSessions","fetchedUserPerformance","fetchUserPerformance","setUserData","setUserActivity","setUserAverageSessions","setUserPerformance","error","console","mockData","USER_MAIN_DATA","find","user","id","parseInt","USER_ACTIVITY","activity","USER_AVERAGE_SESSIONS","session","USER_PERFORMANCE","performance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/Page/Profile.js"],"sourcesContent":["useEffect(() => {\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const fetchedUserData = await fetchUserData(userId);\r\n      const fetchedUserActivity = await fetchUserActivity(userId);\r\n      const fetchedUserAverageSessions = await fetchUserAverageSessions(userId);\r\n      const fetchedUserPerformance = await fetchUserPerformance(userId);\r\n\r\n      setUserData(fetchedUserData);\r\n      setUserActivity(fetchedUserActivity);\r\n      setUserAverageSessions(fetchedUserAverageSessions);\r\n      setUserPerformance(fetchedUserPerformance);\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setLoading(false);\r\n\r\n      setUserData(mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId)));\r\n      setUserActivity(mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId)));\r\n      setUserAverageSessions(mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId)));\r\n      setUserPerformance(mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId)));\r\n    }\r\n  };\r\n\r\n  fetchData();\r\n}, [userId]);\r\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACFC,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMC,eAAe,GAAG,MAAMC,aAAa,CAACC,MAAM,CAAC;MACnD,MAAMC,mBAAmB,GAAG,MAAMC,iBAAiB,CAACF,MAAM,CAAC;MAC3D,MAAMG,0BAA0B,GAAG,MAAMC,wBAAwB,CAACJ,MAAM,CAAC;MACzE,MAAMK,sBAAsB,GAAG,MAAMC,oBAAoB,CAACN,MAAM,CAAC;MAEjEO,WAAW,CAACT,eAAe,CAAC;MAC5BU,eAAe,CAACP,mBAAmB,CAAC;MACpCQ,sBAAsB,CAACN,0BAA0B,CAAC;MAClDO,kBAAkB,CAACL,sBAAsB,CAAC;MAE1CR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5Cd,UAAU,CAAC,KAAK,CAAC;MAEjBU,WAAW,CAACM,QAAQ,CAACC,cAAc,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKC,QAAQ,CAAClB,MAAM,CAAC,CAAC,CAAC;MAC/EQ,eAAe,CAACK,QAAQ,CAACM,aAAa,CAACJ,IAAI,CAACK,QAAQ,IAAIA,QAAQ,CAACpB,MAAM,KAAKkB,QAAQ,CAAClB,MAAM,CAAC,CAAC,CAAC;MAC9FS,sBAAsB,CAACI,QAAQ,CAACQ,qBAAqB,CAACN,IAAI,CAACO,OAAO,IAAIA,OAAO,CAACtB,MAAM,KAAKkB,QAAQ,CAAClB,MAAM,CAAC,CAAC,CAAC;MAC3GU,kBAAkB,CAACG,QAAQ,CAACU,gBAAgB,CAACR,IAAI,CAACS,WAAW,IAAIA,WAAW,CAACxB,MAAM,KAAKkB,QAAQ,CAAClB,MAAM,CAAC,CAAC,CAAC;IAC5G;EACF,CAAC;EAEDJ,SAAS,CAAC,CAAC;AACb,CAAC,EAAE,CAACI,MAAM,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}