{"ast":null,"code":"// apiService.js\n\nconst BASE_URL = 'https://api.github.com';\n\n// Function to fetch user data\nexport async function fetchUserData(username) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${username}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userData = await response.json();\n    return mapUserData(userData); // Data standardization\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\n\n// Function to fetch user activity\nexport async function fetchUserActivity(username) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${username}/events`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userActivity = await response.json();\n    return mapUserActivity(userActivity); // Data standardization\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\n\n// Function to fetch user average sessions (mock implementation)\nexport async function fetchUserAverageSessions(username) {\n  // Mock implementation since GitHub API doesn't provide this data\n  return {\n    userId: username,\n    sessions: [{\n      date: '2024-07-06',\n      averageDuration: 45\n    }, {\n      date: '2024-07-05',\n      averageDuration: 50\n    }\n    // Add more mock data as needed\n    ]\n  };\n}\n\n// Function to fetch user performance (mock implementation)\nexport async function fetchUserPerformance(username) {\n  // Mock implementation since GitHub API doesn't provide this data\n  return {\n    userId: username,\n    data: {\n      speed: 80,\n      strength: 75,\n      endurance: 90\n    }\n  };\n}\n\n// Mapping functions for data standardization\n\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      username: userData.login,\n      avatarUrl: userData.avatar_url,\n      profileUrl: userData.html_url,\n      name: userData.name,\n      location: userData.location,\n      bio: userData.bio,\n      publicRepos: userData.public_repos,\n      followers: userData.followers,\n      following: userData.following\n    }\n  };\n}\nfunction mapUserActivity(userActivity) {\n  // Simplified mapping for demonstration purposes\n  return userActivity.map(event => ({\n    type: event.type,\n    created_at: event.created_at\n  }));\n}","map":{"version":3,"names":["BASE_URL","fetchUserData","username","response","fetch","ok","Error","userData","json","mapUserData","error","console","fetchUserActivity","userActivity","mapUserActivity","fetchUserAverageSessions","userId","sessions","date","averageDuration","fetchUserPerformance","data","speed","strength","endurance","id","userInfos","login","avatarUrl","avatar_url","profileUrl","html_url","name","location","bio","publicRepos","public_repos","followers","following","map","event","type","created_at"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["// apiService.js\r\n\r\nconst BASE_URL = 'https://api.github.com';\r\n\r\n// Function to fetch user data\r\nexport async function fetchUserData(username) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${username}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userData = await response.json();\r\n    return mapUserData(userData); // Data standardization\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to fetch user activity\r\nexport async function fetchUserActivity(username) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${username}/events`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userActivity = await response.json();\r\n    return mapUserActivity(userActivity); // Data standardization\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to fetch user average sessions (mock implementation)\r\nexport async function fetchUserAverageSessions(username) {\r\n  // Mock implementation since GitHub API doesn't provide this data\r\n  return {\r\n    userId: username,\r\n    sessions: [\r\n      { date: '2024-07-06', averageDuration: 45 },\r\n      { date: '2024-07-05', averageDuration: 50 },\r\n      // Add more mock data as needed\r\n    ],\r\n  };\r\n}\r\n\r\n// Function to fetch user performance (mock implementation)\r\nexport async function fetchUserPerformance(username) {\r\n  // Mock implementation since GitHub API doesn't provide this data\r\n  return {\r\n    userId: username,\r\n    data: {\r\n      speed: 80,\r\n      strength: 75,\r\n      endurance: 90,\r\n    },\r\n  };\r\n}\r\n\r\n// Mapping functions for data standardization\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      username: userData.login,\r\n      avatarUrl: userData.avatar_url,\r\n      profileUrl: userData.html_url,\r\n      name: userData.name,\r\n      location: userData.location,\r\n      bio: userData.bio,\r\n      publicRepos: userData.public_repos,\r\n      followers: userData.followers,\r\n      following: userData.following,\r\n    },\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  // Simplified mapping for demonstration purposes\r\n  return userActivity.map(event => ({\r\n    type: event.type,\r\n    created_at: event.created_at,\r\n  }));\r\n}\r\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAG,wBAAwB;;AAEzC;AACA,OAAO,eAAeC,aAAaA,CAACC,QAAQ,EAAE;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,UAAUE,QAAQ,EAAE,CAAC;IAC7D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACtC,OAAOC,WAAW,CAACF,QAAQ,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,OAAO,eAAeE,iBAAiBA,CAACV,QAAQ,EAAE;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,UAAUE,QAAQ,SAAS,CAAC;IACpE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,MAAMO,YAAY,GAAG,MAAMV,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC1C,OAAOM,eAAe,CAACD,YAAY,CAAC,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA,OAAO,eAAeK,wBAAwBA,CAACb,QAAQ,EAAE;EACvD;EACA,OAAO;IACLc,MAAM,EAAEd,QAAQ;IAChBe,QAAQ,EAAE,CACR;MAAEC,IAAI,EAAE,YAAY;MAAEC,eAAe,EAAE;IAAG,CAAC,EAC3C;MAAED,IAAI,EAAE,YAAY;MAAEC,eAAe,EAAE;IAAG;IAC1C;IAAA;EAEJ,CAAC;AACH;;AAEA;AACA,OAAO,eAAeC,oBAAoBA,CAAClB,QAAQ,EAAE;EACnD;EACA,OAAO;IACLc,MAAM,EAAEd,QAAQ;IAChBmB,IAAI,EAAE;MACJC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb;EACF,CAAC;AACH;;AAEA;;AAEA,SAASf,WAAWA,CAACF,QAAQ,EAAE;EAC7B,OAAO;IACLkB,EAAE,EAAElB,QAAQ,CAACkB,EAAE;IACfC,SAAS,EAAE;MACTxB,QAAQ,EAAEK,QAAQ,CAACoB,KAAK;MACxBC,SAAS,EAAErB,QAAQ,CAACsB,UAAU;MAC9BC,UAAU,EAAEvB,QAAQ,CAACwB,QAAQ;MAC7BC,IAAI,EAAEzB,QAAQ,CAACyB,IAAI;MACnBC,QAAQ,EAAE1B,QAAQ,CAAC0B,QAAQ;MAC3BC,GAAG,EAAE3B,QAAQ,CAAC2B,GAAG;MACjBC,WAAW,EAAE5B,QAAQ,CAAC6B,YAAY;MAClCC,SAAS,EAAE9B,QAAQ,CAAC8B,SAAS;MAC7BC,SAAS,EAAE/B,QAAQ,CAAC+B;IACtB;EACF,CAAC;AACH;AAEA,SAASxB,eAAeA,CAACD,YAAY,EAAE;EACrC;EACA,OAAOA,YAAY,CAAC0B,GAAG,CAACC,KAAK,KAAK;IAChCC,IAAI,EAAED,KAAK,CAACC,IAAI;IAChBC,UAAU,EAAEF,KAAK,CAACE;EACpB,CAAC,CAAC,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}