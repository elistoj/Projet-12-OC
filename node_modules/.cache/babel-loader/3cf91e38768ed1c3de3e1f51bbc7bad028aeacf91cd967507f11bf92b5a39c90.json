{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elist\\\\OneDrive\\\\Documents\\\\GitHub\\\\Projet-12-OC\\\\src\\\\Page\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Profile.css';\nimport ActivityChart from '../components/charts/ActivityChart/ActivityChart';\nimport AverageSessionsChart from '../components/charts/AverageSessionsChart/AverageSessionsChart';\nimport NutritionalInfo from '../components/charts/NutritionalInfo/NutritionalInfo';\nimport RadarChart from '../components/charts/PerformanceChart/RadarChart';\nimport ScoreChart from '../components/charts/ScoreChart/ScoreChart';\nimport { fetchUserData, fetchUserActivity, fetchUserAverageSessions, fetchUserPerformance } from '../service/api';\nimport mockData from '../mockData.json'; // Вчитајте го mockData.json како потребно\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = ({\n  userId\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const [userActivity, setUserActivity] = useState(null);\n  const [userAverageSessions, setUserAverageSessions] = useState(null);\n  const [userPerformance, setUserPerformance] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const fetchedUserData = await fetchUserData(userId);\n        const fetchedUserActivity = await fetchUserActivity(userId);\n        const fetchedUserAverageSessions = await fetchUserAverageSessions(userId);\n        const fetchedUserPerformance = await fetchUserPerformance(userId);\n        setUserData(fetchedUserData);\n        setUserActivity(fetchedUserActivity);\n        setUserAverageSessions(fetchedUserAverageSessions);\n        setUserPerformance(fetchedUserPerformance);\n        setLoading(false);\n        setError(null); // Исчисти го error ако вчитувањето е успешно\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Les données sont temporairement indisponibles. Veuillez réessayer plus tard.');\n        setLoading(false);\n\n        // Во случај на грешка при API повикот, поставете mock податоци\n        setUserData(mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId)) || null);\n        setUserActivity(mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId)) || null);\n        setUserAverageSessions(mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId)) || null);\n        setUserPerformance(mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId)) || null);\n      }\n    };\n    fetchData();\n  }, [userId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n  if (!userData || !userActivity || !userAverageSessions || !userPerformance) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Data not available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 12\n    }, this);\n  }\n  const {\n    firstName\n  } = userData.userInfos;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-header-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Bonjour \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user-name\",\n            children: firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"F\\xE9licitation ! Vous avez explos\\xE9 vos objectifs hier \\uD83D\\uDC4F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-activity\",\n        children: /*#__PURE__*/_jsxDEV(ActivityChart, {\n          data: userActivity.sessions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trois-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: /*#__PURE__*/_jsxDEV(AverageSessionsChart, {\n            data: userAverageSessions.sessions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: /*#__PURE__*/_jsxDEV(RadarChart, {\n            data: userPerformance.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: /*#__PURE__*/_jsxDEV(ScoreChart, {\n            data: {\n              score: userData.score\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sections\",\n      children: /*#__PURE__*/_jsxDEV(NutritionalInfo, {\n        calorieCount: userData.keyData.calorieCount,\n        proteinCount: userData.keyData.proteinCount,\n        carbohydrateCount: userData.keyData.carbohydrateCount,\n        lipidCount: userData.keyData.lipidCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"+e67hiUdP8C0tpVz7YTgWEf1yx4=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","ActivityChart","AverageSessionsChart","NutritionalInfo","RadarChart","ScoreChart","fetchUserData","fetchUserActivity","fetchUserAverageSessions","fetchUserPerformance","mockData","jsxDEV","_jsxDEV","Profile","userId","_s","userData","setUserData","userActivity","setUserActivity","userAverageSessions","setUserAverageSessions","userPerformance","setUserPerformance","loading","setLoading","error","setError","fetchData","fetchedUserData","fetchedUserActivity","fetchedUserAverageSessions","fetchedUserPerformance","console","USER_MAIN_DATA","find","user","id","parseInt","USER_ACTIVITY","activity","USER_AVERAGE_SESSIONS","session","USER_PERFORMANCE","performance","children","fileName","_jsxFileName","lineNumber","columnNumber","firstName","userInfos","className","data","sessions","score","calorieCount","keyData","proteinCount","carbohydrateCount","lipidCount","_c","$RefreshReg$"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/Page/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Profile.css';\r\nimport ActivityChart from '../components/charts/ActivityChart/ActivityChart';\r\nimport AverageSessionsChart from '../components/charts/AverageSessionsChart/AverageSessionsChart';\r\nimport NutritionalInfo from '../components/charts/NutritionalInfo/NutritionalInfo';\r\nimport RadarChart from '../components/charts/PerformanceChart/RadarChart';\r\nimport ScoreChart from '../components/charts/ScoreChart/ScoreChart';\r\n\r\nimport {\r\n  fetchUserData,\r\n  fetchUserActivity,\r\n  fetchUserAverageSessions,\r\n  fetchUserPerformance,\r\n} from '../service/api';\r\n\r\nimport mockData from '../mockData.json'; // Вчитајте го mockData.json како потребно\r\n\r\nconst Profile = ({ userId }) => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [userActivity, setUserActivity] = useState(null);\r\n  const [userAverageSessions, setUserAverageSessions] = useState(null);\r\n  const [userPerformance, setUserPerformance] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        const fetchedUserData = await fetchUserData(userId);\r\n        const fetchedUserActivity = await fetchUserActivity(userId);\r\n        const fetchedUserAverageSessions = await fetchUserAverageSessions(userId);\r\n        const fetchedUserPerformance = await fetchUserPerformance(userId);\r\n\r\n        setUserData(fetchedUserData);\r\n        setUserActivity(fetchedUserActivity);\r\n        setUserAverageSessions(fetchedUserAverageSessions);\r\n        setUserPerformance(fetchedUserPerformance);\r\n\r\n        setLoading(false);\r\n        setError(null); // Исчисти го error ако вчитувањето е успешно\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Les données sont temporairement indisponibles. Veuillez réessayer plus tard.');\r\n        setLoading(false);\r\n\r\n        // Во случај на грешка при API повикот, поставете mock податоци\r\n        setUserData(mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId)) || null);\r\n        setUserActivity(mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId)) || null);\r\n        setUserAverageSessions(mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId)) || null);\r\n        setUserPerformance(mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId)) || null);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [userId]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  if (!userData || !userActivity || !userAverageSessions || !userPerformance) {\r\n    return <div>Data not available</div>;\r\n  }\r\n\r\n  const { firstName } = userData.userInfos;\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <div className=\"profile-header-section\">\r\n        <div className=\"profile-header\">\r\n          <h1>Bonjour <span className=\"user-name\">{firstName}</span></h1>\r\n          <p>Félicitation ! Vous avez explosé vos objectifs hier 👏</p>\r\n        </div>\r\n        <div className=\"section-activity\">\r\n          <ActivityChart data={userActivity.sessions} />\r\n        </div>\r\n        <div className=\"trois-sections\">\r\n          <div className=\"section\">\r\n            <AverageSessionsChart data={userAverageSessions.sessions} />\r\n          </div>\r\n          <div className=\"section\">\r\n            <RadarChart data={userPerformance.data} />\r\n          </div>\r\n          <div className=\"section\">\r\n            <ScoreChart data={{ score: userData.score }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"sections\">\r\n        <NutritionalInfo\r\n          calorieCount={userData.keyData.calorieCount}\r\n          proteinCount={userData.keyData.proteinCount}\r\n          carbohydrateCount={userData.keyData.carbohydrateCount}\r\n          lipidCount={userData.keyData.lipidCount}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}