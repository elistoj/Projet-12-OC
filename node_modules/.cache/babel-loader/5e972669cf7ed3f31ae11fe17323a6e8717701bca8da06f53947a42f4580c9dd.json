{"ast":null,"code":"const BASE_URL = 'http://localhost:3001/api';\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\n  }\n  return response.json();\n}\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\n    const userData = await checkResponse(response);\n    return mapUserData(userData);\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\n\n// ... other fetch functions\n\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: userData.firstName,\n      lastName: userData.lastName\n    },\n    keyData: {\n      calorieCount: userData.calorieCount,\n      proteinCount: userData.proteinCount,\n      carbohydrateCount: userData.carbohydrateCount,\n      lipidCount: userData.lipidCount\n    },\n    score: userData.score\n  };\n}\nfunction mapUserActivity(userActivity) {\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.map(session => ({\n      day: session.created_at,\n      sessionLength: session.sessionLength // Assuming `sessionLength` is a valid field\n    }))\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => ({\n      day: session.day,\n      averageDuration: session.sessionLength\n    }))\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  return {\n    userId: userPerformance.userId,\n    data: userPerformance.data.map(item => ({\n      kind: item.kind,\n      value: item.value\n    }))\n  };\n}","map":{"version":3,"names":["BASE_URL","checkResponse","response","ok","errorText","text","Error","status","json","fetchUserData","userId","fetch","userData","mapUserData","error","console","id","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","score","mapUserActivity","userActivity","sessions","map","session","day","created_at","sessionLength","mapUserAverageSessions","userAverageSessions","averageDuration","mapUserPerformance","userPerformance","data","item","kind","value"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3001/api';\r\n\r\nasync function checkResponse(response) {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Network response was not ok. Status: ${response.status}. Message: ${errorText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\r\n    const userData = await checkResponse(response);\r\n    return mapUserData(userData);\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ... other fetch functions\r\n\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.calorieCount,\r\n      proteinCount: userData.proteinCount,\r\n      carbohydrateCount: userData.carbohydrateCount,\r\n      lipidCount: userData.lipidCount,\r\n    },\r\n    score: userData.score,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.map(session => ({\r\n      day: session.created_at,\r\n      sessionLength: session.sessionLength,  // Assuming `sessionLength` is a valid field\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      day: session.day,\r\n      averageDuration: session.sessionLength,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: userPerformance.data.map(item => ({\r\n      kind: item.kind,\r\n      value: item.value,\r\n    })),\r\n  };\r\n}\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAE5C,eAAeC,aAAaA,CAACC,QAAQ,EAAE;EACrC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAAC,wCAAwCJ,QAAQ,CAACK,MAAM,cAAcH,SAAS,EAAE,CAAC;EACnG;EACA,OAAOF,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB;AAEA,OAAO,eAAeC,aAAaA,CAACC,MAAM,EAAE;EAC1C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,QAAQ,UAAUU,MAAM,EAAE,CAAC;IAC3D,MAAME,QAAQ,GAAG,MAAMX,aAAa,CAACC,QAAQ,CAAC;IAC9C,OAAOW,WAAW,CAACD,QAAQ,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF;;AAEA;;AAGA,SAASD,WAAWA,CAACD,QAAQ,EAAE;EAC7B,OAAO;IACLI,EAAE,EAAEJ,QAAQ,CAACI,EAAE;IACfC,SAAS,EAAE;MACTC,SAAS,EAAEN,QAAQ,CAACM,SAAS;MAC7BC,QAAQ,EAAEP,QAAQ,CAACO;IACrB,CAAC;IACDC,OAAO,EAAE;MACPC,YAAY,EAAET,QAAQ,CAACS,YAAY;MACnCC,YAAY,EAAEV,QAAQ,CAACU,YAAY;MACnCC,iBAAiB,EAAEX,QAAQ,CAACW,iBAAiB;MAC7CC,UAAU,EAAEZ,QAAQ,CAACY;IACvB,CAAC;IACDC,KAAK,EAAEb,QAAQ,CAACa;EAClB,CAAC;AACH;AAEA,SAASC,eAAeA,CAACC,YAAY,EAAE;EACrC,OAAO;IACLjB,MAAM,EAAEiB,YAAY,CAACjB,MAAM;IAC3BkB,QAAQ,EAAED,YAAY,CAACE,GAAG,CAACC,OAAO,KAAK;MACrCC,GAAG,EAAED,OAAO,CAACE,UAAU;MACvBC,aAAa,EAAEH,OAAO,CAACG,aAAa,CAAG;IACzC,CAAC,CAAC;EACJ,CAAC;AACH;AAEA,SAASC,sBAAsBA,CAACC,mBAAmB,EAAE;EACnD,OAAO;IACLzB,MAAM,EAAEyB,mBAAmB,CAACzB,MAAM;IAClCkB,QAAQ,EAAEO,mBAAmB,CAACP,QAAQ,CAACC,GAAG,CAACC,OAAO,KAAK;MACrDC,GAAG,EAAED,OAAO,CAACC,GAAG;MAChBK,eAAe,EAAEN,OAAO,CAACG;IAC3B,CAAC,CAAC;EACJ,CAAC;AACH;AAEA,SAASI,kBAAkBA,CAACC,eAAe,EAAE;EAC3C,OAAO;IACL5B,MAAM,EAAE4B,eAAe,CAAC5B,MAAM;IAC9B6B,IAAI,EAAED,eAAe,CAACC,IAAI,CAACV,GAAG,CAACW,IAAI,KAAK;MACtCC,IAAI,EAAED,IAAI,CAACC,IAAI;MACfC,KAAK,EAAEF,IAAI,CAACE;IACd,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}