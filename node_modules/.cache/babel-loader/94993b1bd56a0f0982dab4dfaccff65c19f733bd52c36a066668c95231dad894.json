{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elist\\\\OneDrive\\\\Documents\\\\GitHub\\\\Projet-12-OC\\\\src\\\\components\\\\Profile\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Profile.css'; // Import your CSS styles here\nimport ActivityChart from '../charts/ActivityChart/ActivityChart'; // Example import for ActivityChart component\nimport AverageSessionsChart from '../charts/AverageSessionsChart/AverageSessionsChart';\nimport NutritionalInfo from '../charts/NutritionalInfo/NutritionalInfo';\nimport RadarChart from '../charts/PerformanceChart/RadarChart';\nimport ScoreChart from '../charts/ScoreChart/ScoreChart';\n\n// Assuming this is your mock data structure\nimport mockData from '../../mockData.json';\n\n// Define emptyUserData if necessary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emptyUserData = {}; // Define an empty object or adjust based on your needs\n\nconst Profile = ({\n  userId\n}) => {\n  _s();\n  // State hooks for storing user data\n  const [userData, setUserData] = useState(null);\n  const [userActivity, setUserActivity] = useState(null);\n  const [userAverageSessions, setUserAverageSessions] = useState(null);\n  const [userPerformance, setUserPerformance] = useState(null);\n\n  // useEffect to simulate fetching user data\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        // Simulating fetching data from an API or using mock data\n        // Replace with your actual fetching logic\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate loading delay\n\n        // Example mock data usage\n        const mockUserData = {\n          userInfos: {\n            firstName: 'Cecilia'\n          },\n          keyData: {\n            calorieCount: 2500,\n            proteinCount: 90,\n            carbohydrateCount: 150,\n            lipidCount: 120\n          },\n          score: 85\n        };\n        setUserData(mockUserData);\n        setUserActivity(mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId)));\n        setUserAverageSessions(mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId)));\n        setUserPerformance(mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId)));\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, [userId]);\n\n  // If data is still loading, display a loading message\n  if (!userData || !userActivity || !userAverageSessions || !userPerformance) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Destructure values for easier access in the JSX\n  const {\n    firstName\n  } = userData.userInfos;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-header-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Bonjour \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user-name\",\n            children: userData.userInfos.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"F\\xE9licitation ! Vous avez explos\\xE9 vos objectifs hier \\uD83D\\uDC4F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-activity\",\n        children: /*#__PURE__*/_jsxDEV(ActivityChart, {\n          data: userData.sessions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trois-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: /*#__PURE__*/_jsxDEV(AverageSessionsChart, {\n            data: userData.averageSessions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: /*#__PURE__*/_jsxDEV(RadarChart, {\n            data: userData.performance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section\",\n          children: /*#__PURE__*/_jsxDEV(ScoreChart, {\n            data: {\n              score: userData.score\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sections\",\n      children: /*#__PURE__*/_jsxDEV(NutritionalInfo, {\n        calorieCount: userData.keyData.calorieCount,\n        proteinCount: userData.keyData.proteinCount,\n        carbohydrateCount: userData.keyData.carbohydrateCount,\n        lipidCount: userData.keyData.lipidCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"IATTRuvat0J+5uRQ2DfsgJtV43A=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","ActivityChart","AverageSessionsChart","NutritionalInfo","RadarChart","ScoreChart","mockData","jsxDEV","_jsxDEV","emptyUserData","Profile","userId","_s","userData","setUserData","userActivity","setUserActivity","userAverageSessions","setUserAverageSessions","userPerformance","setUserPerformance","fetchUserData","Promise","resolve","setTimeout","mockUserData","userInfos","firstName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","score","USER_ACTIVITY","find","activity","parseInt","USER_AVERAGE_SESSIONS","session","USER_PERFORMANCE","performance","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","data","sessions","averageSessions","_c","$RefreshReg$"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/components/Profile/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Profile.css'; // Import your CSS styles here\r\nimport ActivityChart from '../charts/ActivityChart/ActivityChart'; // Example import for ActivityChart component\r\nimport AverageSessionsChart from '../charts/AverageSessionsChart/AverageSessionsChart';\r\nimport NutritionalInfo from '../charts/NutritionalInfo/NutritionalInfo';\r\nimport RadarChart from '../charts/PerformanceChart/RadarChart';\r\nimport ScoreChart from '../charts/ScoreChart/ScoreChart';\r\n\r\n// Assuming this is your mock data structure\r\nimport mockData from '../../mockData.json';\r\n\r\n// Define emptyUserData if necessary\r\nconst emptyUserData = {}; // Define an empty object or adjust based on your needs\r\n\r\nconst Profile = ({ userId }) => {\r\n  // State hooks for storing user data\r\n  const [userData, setUserData] = useState(null);\r\n  const [userActivity, setUserActivity] = useState(null);\r\n  const [userAverageSessions, setUserAverageSessions] = useState(null);\r\n  const [userPerformance, setUserPerformance] = useState(null);\r\n\r\n  // useEffect to simulate fetching user data\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        // Simulating fetching data from an API or using mock data\r\n        // Replace with your actual fetching logic\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate loading delay\r\n\r\n        // Example mock data usage\r\n        const mockUserData = {\r\n          userInfos: {\r\n            firstName: 'Cecilia',\r\n          },\r\n          keyData: {\r\n            calorieCount: 2500,\r\n            proteinCount: 90,\r\n            carbohydrateCount: 150,\r\n            lipidCount: 120,\r\n          },\r\n          score: 85,\r\n        };\r\n\r\n        setUserData(mockUserData);\r\n        setUserActivity(mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId)));\r\n        setUserAverageSessions(mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId)));\r\n        setUserPerformance(mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId)));\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, [userId]);\r\n\r\n  // If data is still loading, display a loading message\r\n  if (!userData || !userActivity || !userAverageSessions || !userPerformance) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Destructure values for easier access in the JSX\r\n  const { firstName } = userData.userInfos;\r\n\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <div className='profile-header-section'>\r\n        <div className=\"profile-header\">\r\n          <h1>Bonjour <span className=\"user-name\">{userData.userInfos.firstName}</span></h1>\r\n          <p>Félicitation ! Vous avez explosé vos objectifs hier 👏</p>\r\n        </div>\r\n        <div className=\"section-activity\">\r\n          <ActivityChart data={userData.sessions} />\r\n        </div>\r\n        <div className='trois-sections'>\r\n          <div className=\"section\">\r\n            <AverageSessionsChart data={userData.averageSessions} />\r\n          </div>\r\n          <div className=\"section\">\r\n            <RadarChart data={userData.performance} />\r\n          </div>\r\n          <div className=\"section\">\r\n            <ScoreChart data={{ score: userData.score }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"sections\">\r\n        <NutritionalInfo\r\n          calorieCount={userData.keyData.calorieCount}\r\n          proteinCount={userData.keyData.proteinCount}\r\n          carbohydrateCount={userData.keyData.carbohydrateCount}\r\n          lipidCount={userData.keyData.lipidCount}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,eAAe,CAAC,CAAC;AACxB,OAAOC,aAAa,MAAM,uCAAuC,CAAC,CAAC;AACnE,OAAOC,oBAAoB,MAAM,qDAAqD;AACtF,OAAOC,eAAe,MAAM,2CAA2C;AACvE,OAAOC,UAAU,MAAM,uCAAuC;AAC9D,OAAOC,UAAU,MAAM,iCAAiC;;AAExD;AACA,OAAOC,QAAQ,MAAM,qBAAqB;;AAE1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;;AAE1B,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACkB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMqB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA;QACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;QAEzD;QACA,MAAME,YAAY,GAAG;UACnBC,SAAS,EAAE;YACTC,SAAS,EAAE;UACb,CAAC;UACDC,OAAO,EAAE;YACPC,YAAY,EAAE,IAAI;YAClBC,YAAY,EAAE,EAAE;YAChBC,iBAAiB,EAAE,GAAG;YACtBC,UAAU,EAAE;UACd,CAAC;UACDC,KAAK,EAAE;QACT,CAAC;QAEDnB,WAAW,CAACW,YAAY,CAAC;QACzBT,eAAe,CAACV,QAAQ,CAAC4B,aAAa,CAACC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACzB,MAAM,KAAK0B,QAAQ,CAAC1B,MAAM,CAAC,CAAC,CAAC;QAC9FO,sBAAsB,CAACZ,QAAQ,CAACgC,qBAAqB,CAACH,IAAI,CAACI,OAAO,IAAIA,OAAO,CAAC5B,MAAM,KAAK0B,QAAQ,CAAC1B,MAAM,CAAC,CAAC,CAAC;QAC3GS,kBAAkB,CAACd,QAAQ,CAACkC,gBAAgB,CAACL,IAAI,CAACM,WAAW,IAAIA,WAAW,CAAC9B,MAAM,KAAK0B,QAAQ,CAAC1B,MAAM,CAAC,CAAC,CAAC;MAC5G,CAAC,CAAC,OAAO+B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDrB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACV,MAAM,CAAC,CAAC;;EAEZ;EACA,IAAI,CAACE,QAAQ,IAAI,CAACE,YAAY,IAAI,CAACE,mBAAmB,IAAI,CAACE,eAAe,EAAE;IAC1E,oBAAOX,OAAA;MAAAoC,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,MAAM;IAAErB;EAAU,CAAC,GAAGd,QAAQ,CAACa,SAAS;EAExC,oBACElB,OAAA;IAAKyC,SAAS,EAAC,mBAAmB;IAAAL,QAAA,gBAChCpC,OAAA;MAAKyC,SAAS,EAAC,wBAAwB;MAAAL,QAAA,gBACrCpC,OAAA;QAAKyC,SAAS,EAAC,gBAAgB;QAAAL,QAAA,gBAC7BpC,OAAA;UAAAoC,QAAA,GAAI,UAAQ,eAAApC,OAAA;YAAMyC,SAAS,EAAC,WAAW;YAAAL,QAAA,EAAE/B,QAAQ,CAACa,SAAS,CAACC;UAAS;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClFxC,OAAA;UAAAoC,QAAA,EAAG;QAAsD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC,eACNxC,OAAA;QAAKyC,SAAS,EAAC,kBAAkB;QAAAL,QAAA,eAC/BpC,OAAA,CAACP,aAAa;UAACiD,IAAI,EAAErC,QAAQ,CAACsC;QAAS;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACNxC,OAAA;QAAKyC,SAAS,EAAC,gBAAgB;QAAAL,QAAA,gBAC7BpC,OAAA;UAAKyC,SAAS,EAAC,SAAS;UAAAL,QAAA,eACtBpC,OAAA,CAACN,oBAAoB;YAACgD,IAAI,EAAErC,QAAQ,CAACuC;UAAgB;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC,eACNxC,OAAA;UAAKyC,SAAS,EAAC,SAAS;UAAAL,QAAA,eACtBpC,OAAA,CAACJ,UAAU;YAAC8C,IAAI,EAAErC,QAAQ,CAAC4B;UAAY;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,eACNxC,OAAA;UAAKyC,SAAS,EAAC,SAAS;UAAAL,QAAA,eACtBpC,OAAA,CAACH,UAAU;YAAC6C,IAAI,EAAE;cAAEjB,KAAK,EAAEpB,QAAQ,CAACoB;YAAM;UAAE;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNxC,OAAA;MAAKyC,SAAS,EAAC,UAAU;MAAAL,QAAA,eACvBpC,OAAA,CAACL,eAAe;QACd0B,YAAY,EAAEhB,QAAQ,CAACe,OAAO,CAACC,YAAa;QAC5CC,YAAY,EAAEjB,QAAQ,CAACe,OAAO,CAACE,YAAa;QAC5CC,iBAAiB,EAAElB,QAAQ,CAACe,OAAO,CAACG,iBAAkB;QACtDC,UAAU,EAAEnB,QAAQ,CAACe,OAAO,CAACI;MAAW;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpC,EAAA,CAjFIF,OAAO;AAAA2C,EAAA,GAAP3C,OAAO;AAmFb,eAAeA,OAAO;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}