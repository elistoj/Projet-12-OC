{"ast":null,"code":"export function fetchUserData(userId) {\n  return fetch(`${BASE_URL}/${userId}`).then(response => response.json()).then(userData => mapUserData(userData.data)).catch(() => {\n    console.warn(FETCH_ERROR_MESSAGE);\n    const userDataFromMock = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\n    return mapUserData(userDataFromMock);\n  });\n}\nexport function fetchUserActivity(userId) {\n  return fetch(`${BASE_URL}/${userId}/activity`).then(response => response.json()).then(userActivity => mapUserActivity(userActivity.data)).catch(() => {\n    console.warn(FETCH_ERROR_MESSAGE);\n    const userActivityFromMock = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\n    return mapUserActivity(userActivityFromMock);\n  });\n}\nexport function fetchUserAverageSessions(userId) {\n  return fetch(`${BASE_URL}/${userId}/average-sessions`).then(response => response.json()).then(userAverageSessions => mapUserAverageSessions(userAverageSessions.data)).catch(() => {\n    console.warn(FETCH_ERROR_MESSAGE);\n    const userAverageSessionsFromMock = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\n    return mapUserAverageSessions(userAverageSessionsFromMock);\n  });\n}\nexport function fetchUserPerformance(userId) {\n  return fetch(`${BASE_URL}/${userId}/performance`).then(response => response.json()).then(userPerformance => mapUserPerformance(userPerformance.data)).catch(() => {\n    console.warn(FETCH_ERROR_MESSAGE);\n    const userPerformanceFromMock = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\n    return mapUserPerformance(userPerformanceFromMock);\n  });\n}","map":{"version":3,"names":["fetchUserData","userId","fetch","BASE_URL","then","response","json","userData","mapUserData","data","catch","console","warn","FETCH_ERROR_MESSAGE","userDataFromMock","mockData","USER_MAIN_DATA","find","user","id","parseInt","fetchUserActivity","userActivity","mapUserActivity","userActivityFromMock","USER_ACTIVITY","activity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","userAverageSessionsFromMock","USER_AVERAGE_SESSIONS","session","fetchUserPerformance","userPerformance","mapUserPerformance","userPerformanceFromMock","USER_PERFORMANCE","performance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["export function fetchUserData(userId) {\r\n  return fetch(`${BASE_URL}/${userId}`)\r\n    .then(response => response.json())\r\n    .then(userData => mapUserData(userData.data))\r\n    .catch(() => {\r\n      console.warn(FETCH_ERROR_MESSAGE);\r\n      const userDataFromMock = mockData.USER_MAIN_DATA.find(user => user.id === parseInt(userId));\r\n      return mapUserData(userDataFromMock);\r\n    });\r\n}\r\n\r\nexport function fetchUserActivity(userId) {\r\n  return fetch(`${BASE_URL}/${userId}/activity`)\r\n    .then(response => response.json())\r\n    .then(userActivity => mapUserActivity(userActivity.data))\r\n    .catch(() => {\r\n      console.warn(FETCH_ERROR_MESSAGE);\r\n      const userActivityFromMock = mockData.USER_ACTIVITY.find(activity => activity.userId === parseInt(userId));\r\n      return mapUserActivity(userActivityFromMock);\r\n    });\r\n}\r\n\r\nexport function fetchUserAverageSessions(userId) {\r\n  return fetch(`${BASE_URL}/${userId}/average-sessions`)\r\n    .then(response => response.json())\r\n    .then(userAverageSessions => mapUserAverageSessions(userAverageSessions.data))\r\n    .catch(() => {\r\n      console.warn(FETCH_ERROR_MESSAGE);\r\n      const userAverageSessionsFromMock = mockData.USER_AVERAGE_SESSIONS.find(session => session.userId === parseInt(userId));\r\n      return mapUserAverageSessions(userAverageSessionsFromMock);\r\n    });\r\n}\r\n\r\nexport function fetchUserPerformance(userId) {\r\n  return fetch(`${BASE_URL}/${userId}/performance`)\r\n    .then(response => response.json())\r\n    .then(userPerformance => mapUserPerformance(userPerformance.data))\r\n    .catch(() => {\r\n      console.warn(FETCH_ERROR_MESSAGE);\r\n      const userPerformanceFromMock = mockData.USER_PERFORMANCE.find(performance => performance.userId === parseInt(userId));\r\n      return mapUserPerformance(userPerformanceFromMock);\r\n    });\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,MAAM,EAAE;EACpC,OAAOC,KAAK,CAAC,GAAGC,QAAQ,IAAIF,MAAM,EAAE,CAAC,CAClCG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,QAAQ,IAAIC,WAAW,CAACD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAC5CC,KAAK,CAAC,MAAM;IACXC,OAAO,CAACC,IAAI,CAACC,mBAAmB,CAAC;IACjC,MAAMC,gBAAgB,GAAGC,QAAQ,CAACC,cAAc,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKC,QAAQ,CAACnB,MAAM,CAAC,CAAC;IAC3F,OAAOO,WAAW,CAACM,gBAAgB,CAAC;EACtC,CAAC,CAAC;AACN;AAEA,OAAO,SAASO,iBAAiBA,CAACpB,MAAM,EAAE;EACxC,OAAOC,KAAK,CAAC,GAAGC,QAAQ,IAAIF,MAAM,WAAW,CAAC,CAC3CG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACkB,YAAY,IAAIC,eAAe,CAACD,YAAY,CAACb,IAAI,CAAC,CAAC,CACxDC,KAAK,CAAC,MAAM;IACXC,OAAO,CAACC,IAAI,CAACC,mBAAmB,CAAC;IACjC,MAAMW,oBAAoB,GAAGT,QAAQ,CAACU,aAAa,CAACR,IAAI,CAACS,QAAQ,IAAIA,QAAQ,CAACzB,MAAM,KAAKmB,QAAQ,CAACnB,MAAM,CAAC,CAAC;IAC1G,OAAOsB,eAAe,CAACC,oBAAoB,CAAC;EAC9C,CAAC,CAAC;AACN;AAEA,OAAO,SAASG,wBAAwBA,CAAC1B,MAAM,EAAE;EAC/C,OAAOC,KAAK,CAAC,GAAGC,QAAQ,IAAIF,MAAM,mBAAmB,CAAC,CACnDG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACwB,mBAAmB,IAAIC,sBAAsB,CAACD,mBAAmB,CAACnB,IAAI,CAAC,CAAC,CAC7EC,KAAK,CAAC,MAAM;IACXC,OAAO,CAACC,IAAI,CAACC,mBAAmB,CAAC;IACjC,MAAMiB,2BAA2B,GAAGf,QAAQ,CAACgB,qBAAqB,CAACd,IAAI,CAACe,OAAO,IAAIA,OAAO,CAAC/B,MAAM,KAAKmB,QAAQ,CAACnB,MAAM,CAAC,CAAC;IACvH,OAAO4B,sBAAsB,CAACC,2BAA2B,CAAC;EAC5D,CAAC,CAAC;AACN;AAEA,OAAO,SAASG,oBAAoBA,CAAChC,MAAM,EAAE;EAC3C,OAAOC,KAAK,CAAC,GAAGC,QAAQ,IAAIF,MAAM,cAAc,CAAC,CAC9CG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAAC8B,eAAe,IAAIC,kBAAkB,CAACD,eAAe,CAACzB,IAAI,CAAC,CAAC,CACjEC,KAAK,CAAC,MAAM;IACXC,OAAO,CAACC,IAAI,CAACC,mBAAmB,CAAC;IACjC,MAAMuB,uBAAuB,GAAGrB,QAAQ,CAACsB,gBAAgB,CAACpB,IAAI,CAACqB,WAAW,IAAIA,WAAW,CAACrC,MAAM,KAAKmB,QAAQ,CAACnB,MAAM,CAAC,CAAC;IACtH,OAAOkC,kBAAkB,CAACC,uBAAuB,CAAC;EACpD,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}