{"ast":null,"code":"// apiService.js\n\nconst BASE_URL = 'https://api.example.com'; // Zamijenite sa stvarnim URL-om API-ja\n\n// Funkcija za dohvaćanje podataka o korisniku\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userData = await response.json();\n    return mapUserData(userData); // Standardizacija podataka\n  } catch (error) {\n    console.error('Error fetching user data:', error);\n    throw error;\n  }\n}\n\n// Funkcija za dohvaćanje podataka o aktivnosti korisnika\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userActivity = await response.json();\n    return mapUserActivity(userActivity); // Standardizacija podataka\n  } catch (error) {\n    console.error('Error fetching user activity:', error);\n    throw error;\n  }\n}\n\n// Funkcija za dohvaćanje podataka o prosečnim sesijama korisnika\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userAverageSessions = await response.json();\n    return mapUserAverageSessions(userAverageSessions); // Standardizacija podataka\n  } catch (error) {\n    console.error('Error fetching user average sessions:', error);\n    throw error;\n  }\n}\n\n// Funkcija za dohvaćanje podataka o performansama korisnika\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok.');\n    }\n    const userPerformance = await response.json();\n    return mapUserPerformance(userPerformance); // Standardizacija podataka\n  } catch (error) {\n    console.error('Error fetching user performance:', error);\n    throw error;\n  }\n}\n\n// Mapiranje funkcija za standardizaciju podataka\n\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: userData.firstName,\n      lastName: userData.lastName\n    },\n    keyData: {\n      calorieCount: userData.calorieCount,\n      proteinCount: userData.proteinCount,\n      carbohydrateCount: userData.carbohydrateCount,\n      lipidCount: userData.lipidCount\n    },\n    score: userData.score\n  };\n}\nfunction mapUserActivity(userActivity) {\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.sessions.map(session => ({\n      date: session.date,\n      duration: session.duration\n    }))\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => ({\n      date: session.date,\n      averageDuration: session.averageDuration\n    }))\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  return {\n    userId: userPerformance.userId,\n    data: {\n      speed: userPerformance.speed,\n      strength: userPerformance.strength,\n      endurance: userPerformance.endurance\n    }\n  };\n}","map":{"version":3,"names":["BASE_URL","fetchUserData","userId","response","fetch","ok","Error","userData","json","mapUserData","error","console","fetchUserActivity","userActivity","mapUserActivity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance","id","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","score","sessions","map","session","date","duration","averageDuration","data","speed","strength","endurance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["// apiService.js\r\n\r\nconst BASE_URL = 'https://api.example.com'; // Zamijenite sa stvarnim URL-om API-ja\r\n\r\n// Funkcija za dohvaćanje podataka o korisniku\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userData = await response.json();\r\n    return mapUserData(userData); // Standardizacija podataka\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Funkcija za dohvaćanje podataka o aktivnosti korisnika\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userActivity = await response.json();\r\n    return mapUserActivity(userActivity); // Standardizacija podataka\r\n  } catch (error) {\r\n    console.error('Error fetching user activity:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Funkcija za dohvaćanje podataka o prosečnim sesijama korisnika\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userAverageSessions = await response.json();\r\n    return mapUserAverageSessions(userAverageSessions); // Standardizacija podataka\r\n  } catch (error) {\r\n    console.error('Error fetching user average sessions:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Funkcija za dohvaćanje podataka o performansama korisnika\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok.');\r\n    }\r\n    const userPerformance = await response.json();\r\n    return mapUserPerformance(userPerformance); // Standardizacija podataka\r\n  } catch (error) {\r\n    console.error('Error fetching user performance:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Mapiranje funkcija za standardizaciju podataka\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.calorieCount,\r\n      proteinCount: userData.proteinCount,\r\n      carbohydrateCount: userData.carbohydrateCount,\r\n      lipidCount: userData.lipidCount,\r\n    },\r\n    score: userData.score,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.sessions.map(session => ({\r\n      date: session.date,\r\n      duration: session.duration,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      date: session.date,\r\n      averageDuration: session.averageDuration,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: {\r\n      speed: userPerformance.speed,\r\n      strength: userPerformance.strength,\r\n      endurance: userPerformance.endurance,\r\n    },\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}