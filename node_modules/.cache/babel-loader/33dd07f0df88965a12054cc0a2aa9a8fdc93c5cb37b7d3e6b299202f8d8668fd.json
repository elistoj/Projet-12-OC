{"ast":null,"code":"const BASE_URL = 'https://projet-12-oc.vercel.app/';\n\n// Функција за вчитување на податоци за корисникот\nexport const fetchUserData = async (userId, authToken) => {\n  try {\n    const url = `${BASE_URL}/api/user/${userId}/data.js`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Indisponibilité des données utilisateur');\n    }\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/javascript')) {\n      throw new Error('Invalid content type. Expected JavaScript.');\n    }\n    const jsCode = await response.text(); // Вчитај го како текст\n    const userData = new Function(jsCode)(); // Изврши го како JavaScript код\n\n    return userData;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données utilisateur\", error);\n    throw error;\n  }\n};\n\n// Функција за вчитување на податоци за активност на корисникот\nexport const fetchUserActivity = async (userId, authToken) => {\n  try {\n    const url = `${BASE_URL}/api/user/${userId}/activity.js`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Indisponibilité des données d\\'activité utilisateur');\n    }\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/javascript')) {\n      throw new Error('Invalid content type. Expected JavaScript.');\n    }\n    const jsCode = await response.text(); // Вчитај го како текст\n    const userActivity = new Function(jsCode)(); // Изврши го како JavaScript код\n\n    return userActivity;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données d'activité utilisateur\", error);\n    throw error;\n  }\n};\n\n// Функција за вчитување на податоци за просечни сесии на корисникот\nexport const fetchUserAverageSessions = async (userId, authToken) => {\n  try {\n    const url = `${BASE_URL}/api/user/${userId}/average-sessions.js`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Indisponibilité des sessions moyennes utilisateur');\n    }\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/javascript')) {\n      throw new Error('Invalid content type. Expected JavaScript.');\n    }\n    const jsCode = await response.text(); // Вчитај го како текст\n    const averageSessions = new Function(jsCode)(); // Изврши го како JavaScript код\n\n    return averageSessions;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des sessions moyennes utilisateur\", error);\n    throw error;\n  }\n};\n\n// Функција за вчитување на податоци за перформанси на корисникот\nexport const fetchUserPerformance = async (userId, authToken) => {\n  try {\n    const url = `${BASE_URL}/api/user/${userId}/performance.js`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Indisponibilité des données de performance utilisateur');\n    }\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/javascript')) {\n      throw new Error('Invalid content type. Expected JavaScript.');\n    }\n    const jsCode = await response.text(); // Вчитај го како текст\n    const userPerformance = new Function(jsCode)(); // Изврши го како JavaScript код\n\n    return userPerformance;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des données de performance utilisateur\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchUserData","userId","authToken","url","response","fetch","headers","Authorization","ok","Error","contentType","get","includes","jsCode","text","userData","Function","error","console","fetchUserActivity","userActivity","fetchUserAverageSessions","averageSessions","fetchUserPerformance","userPerformance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'https://projet-12-oc.vercel.app/';\r\n\r\n// Функција за вчитување на податоци за корисникот\r\nexport const fetchUserData = async (userId, authToken) => {\r\n  try {\r\n    const url = `${BASE_URL}/api/user/${userId}/data.js`;\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des données utilisateur');\r\n    }\r\n\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/javascript')) {\r\n      throw new Error('Invalid content type. Expected JavaScript.');\r\n    }\r\n\r\n    const jsCode = await response.text(); // Вчитај го како текст\r\n    const userData = new Function(jsCode)(); // Изврши го како JavaScript код\r\n\r\n    return userData;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функција за вчитување на податоци за активност на корисникот\r\nexport const fetchUserActivity = async (userId, authToken) => {\r\n  try {\r\n    const url = `${BASE_URL}/api/user/${userId}/activity.js`;\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des données d\\'activité utilisateur');\r\n    }\r\n\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/javascript')) {\r\n      throw new Error('Invalid content type. Expected JavaScript.');\r\n    }\r\n\r\n    const jsCode = await response.text(); // Вчитај го како текст\r\n    const userActivity = new Function(jsCode)(); // Изврши го како JavaScript код\r\n\r\n    return userActivity;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données d'activité utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функција за вчитување на податоци за просечни сесии на корисникот\r\nexport const fetchUserAverageSessions = async (userId, authToken) => {\r\n  try {\r\n    const url = `${BASE_URL}/api/user/${userId}/average-sessions.js`;\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des sessions moyennes utilisateur');\r\n    }\r\n\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/javascript')) {\r\n      throw new Error('Invalid content type. Expected JavaScript.');\r\n    }\r\n\r\n    const jsCode = await response.text(); // Вчитај го како текст\r\n    const averageSessions = new Function(jsCode)(); // Изврши го како JavaScript код\r\n\r\n    return averageSessions;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des sessions moyennes utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функција за вчитување на податоци за перформанси на корисникот\r\nexport const fetchUserPerformance = async (userId, authToken) => {\r\n  try {\r\n    const url = `${BASE_URL}/api/user/${userId}/performance.js`;\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Indisponibilité des données de performance utilisateur');\r\n    }\r\n\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/javascript')) {\r\n      throw new Error('Invalid content type. Expected JavaScript.');\r\n    }\r\n\r\n    const jsCode = await response.text(); // Вчитај го како текст\r\n    const userPerformance = new Function(jsCode)(); // Изврши го како JavaScript код\r\n\r\n    return userPerformance;\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la récupération des données de performance utilisateur\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}