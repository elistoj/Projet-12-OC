{"ast":null,"code":"const BASE_URL = 'https://projet-12-oc.vercel.app';\n\n// Fonction pour vérifier la réponse du réseau et retourner du JSON\nasync function checkResponse(response) {\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Réponse du réseau non valide. Statut : ${response.status}. Message : ${errorText}`);\n  }\n  return response.json();\n}\n\n// Fonction pour récupérer les données utilisateur\nexport async function fetchUserData(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\n    const userData = await checkResponse(response);\n    return mapUserData(userData); // Formatage des données\n  } catch (error) {\n    console.error('Erreur lors de la récupération des données utilisateur :', error);\n    throw error;\n  }\n}\n\n// Fonction pour récupérer l'activité utilisateur\nexport async function fetchUserActivity(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`);\n    const userActivity = await checkResponse(response);\n    return mapUserActivity(userActivity); // Formatage des données\n  } catch (error) {\n    console.error('Erreur lors de la récupération de l\\'activité utilisateur :', error);\n    throw error;\n  }\n}\n\n// Fonction pour récupérer les sessions moyennes de l'utilisateur\nexport async function fetchUserAverageSessions(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`);\n    const userAverageSessions = await checkResponse(response);\n    return mapUserAverageSessions(userAverageSessions); // Formatage des données\n  } catch (error) {\n    console.error('Erreur lors de la récupération des sessions moyennes de l\\'utilisateur :', error);\n    throw error;\n  }\n}\n\n// Fonction pour récupérer les performances de l'utilisateur\nexport async function fetchUserPerformance(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`);\n    const userPerformance = await checkResponse(response);\n    return mapUserPerformance(userPerformance); // Formatage des données\n  } catch (error) {\n    console.error('Erreur lors de la récupération des performances de l\\'utilisateur :', error);\n    throw error;\n  }\n}\n\n// Fonctions de mapping pour formater les données reçues\n\nfunction mapUserData(userData) {\n  return {\n    id: userData.id,\n    userInfos: {\n      firstName: userData.firstName,\n      lastName: userData.lastName\n    },\n    keyData: {\n      calorieCount: userData.calorieCount,\n      proteinCount: userData.proteinCount,\n      carbohydrateCount: userData.carbohydrateCount,\n      lipidCount: userData.lipidCount\n    },\n    score: userData.score\n  };\n}\nfunction mapUserActivity(userActivity) {\n  return {\n    userId: userActivity.userId,\n    sessions: userActivity.sessions.map(session => ({\n      date: session.date,\n      duration: session.duration\n    }))\n  };\n}\nfunction mapUserAverageSessions(userAverageSessions) {\n  return {\n    userId: userAverageSessions.userId,\n    sessions: userAverageSessions.sessions.map(session => ({\n      date: session.date,\n      averageDuration: session.averageDuration\n    }))\n  };\n}\nfunction mapUserPerformance(userPerformance) {\n  return {\n    userId: userPerformance.userId,\n    data: {\n      speed: userPerformance.speed,\n      strength: userPerformance.strength,\n      endurance: userPerformance.endurance\n    }\n  };\n}","map":{"version":3,"names":["BASE_URL","checkResponse","response","ok","errorText","text","Error","status","json","fetchUserData","userId","fetch","userData","mapUserData","error","console","fetchUserActivity","userActivity","mapUserActivity","fetchUserAverageSessions","userAverageSessions","mapUserAverageSessions","fetchUserPerformance","userPerformance","mapUserPerformance","id","userInfos","firstName","lastName","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","score","sessions","map","session","date","duration","averageDuration","data","speed","strength","endurance"],"sources":["C:/Users/elist/OneDrive/Documents/GitHub/Projet-12-OC/src/service/api.js"],"sourcesContent":["const BASE_URL = 'https://projet-12-oc.vercel.app';\r\n\r\n// Fonction pour vérifier la réponse du réseau et retourner du JSON\r\nasync function checkResponse(response) {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Réponse du réseau non valide. Statut : ${response.status}. Message : ${errorText}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\n// Fonction pour récupérer les données utilisateur\r\nexport async function fetchUserData(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}`);\r\n    const userData = await checkResponse(response);\r\n    return mapUserData(userData);  // Formatage des données\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des données utilisateur :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Fonction pour récupérer l'activité utilisateur\r\nexport async function fetchUserActivity(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/activity`);\r\n    const userActivity = await checkResponse(response);\r\n    return mapUserActivity(userActivity);  // Formatage des données\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération de l\\'activité utilisateur :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Fonction pour récupérer les sessions moyennes de l'utilisateur\r\nexport async function fetchUserAverageSessions(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/average-sessions`);\r\n    const userAverageSessions = await checkResponse(response);\r\n    return mapUserAverageSessions(userAverageSessions);  // Formatage des données\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des sessions moyennes de l\\'utilisateur :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Fonction pour récupérer les performances de l'utilisateur\r\nexport async function fetchUserPerformance(userId) {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/users/${userId}/performance`);\r\n    const userPerformance = await checkResponse(response);\r\n    return mapUserPerformance(userPerformance);  // Formatage des données\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des performances de l\\'utilisateur :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Fonctions de mapping pour formater les données reçues\r\n\r\nfunction mapUserData(userData) {\r\n  return {\r\n    id: userData.id,\r\n    userInfos: {\r\n      firstName: userData.firstName,\r\n      lastName: userData.lastName,\r\n    },\r\n    keyData: {\r\n      calorieCount: userData.calorieCount,\r\n      proteinCount: userData.proteinCount,\r\n      carbohydrateCount: userData.carbohydrateCount,\r\n      lipidCount: userData.lipidCount,\r\n    },\r\n    score: userData.score,\r\n  };\r\n}\r\n\r\nfunction mapUserActivity(userActivity) {\r\n  return {\r\n    userId: userActivity.userId,\r\n    sessions: userActivity.sessions.map(session => ({\r\n      date: session.date,\r\n      duration: session.duration,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserAverageSessions(userAverageSessions) {\r\n  return {\r\n    userId: userAverageSessions.userId,\r\n    sessions: userAverageSessions.sessions.map(session => ({\r\n      date: session.date,\r\n      averageDuration: session.averageDuration,\r\n    })),\r\n  };\r\n}\r\n\r\nfunction mapUserPerformance(userPerformance) {\r\n  return {\r\n    userId: userPerformance.userId,\r\n    data: {\r\n      speed: userPerformance.speed,\r\n      strength: userPerformance.strength,\r\n      endurance: userPerformance.endurance,\r\n    },\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}